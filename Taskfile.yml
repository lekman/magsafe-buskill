version: "3"
includes:
  sonar:
    taskfile: ./tasks/sonar.yml
    optional: false
  swift:
    taskfile: ./tasks/swift.yml
    optional: false
  security:
    taskfile: ./tasks/security.yml
    optional: false
  markdown:
    taskfile: ./tasks/markdown.yml
    optional: false
  yaml:
    taskfile: ./tasks/yaml.yml
    optional: false
  git:
    taskfile: ./tasks/git.yml
    optional: false
vars:
  HOOKS_PATH: .githooks
  SEMGREP_CONFIG: auto
tasks:
  default:
    desc: Show available tasks
    cmds:
      - |
        echo "üöÄ MagSafe Guard Development Tasks"
        echo "=================================="
        echo ""
        echo "üîß Core Commands:"
        echo "  task init          - Initialize development environment"
        echo "  task run           - Build and run MagSafe Guard"
        echo "  task test          - Run all tests"
        echo "  task clean         - Clean build artifacts"
        echo ""
        echo "‚úÖ Quality Assurance:"
        echo "  task qa            - Run standard QA checks"
        echo "  task qa:quick      - Quick checks (for git hooks)"
        echo "  task qa:fix        - Auto-fix all fixable issues"
        echo "  task qa:full       - Full QA with SonarCloud"
        echo ""
        echo "üì¶ Module Commands:"
        echo "  task swift:        - Swift development tasks"
        echo "  task security:     - Security scanning tasks"
        echo "  task sonar:        - SonarCloud analysis"
        echo "  task markdown:     - Markdown linting"
        echo "  task yaml:         - YAML validation and linting"
        echo "  task git:          - Git and GitHub tasks"
        echo ""
        echo "üí° Tips:"
        echo "  ‚Ä¢ Use 'task <module>:' to see module-specific tasks"
        echo "  ‚Ä¢ Use 'task --list' to see all available tasks"
        echo "  ‚Ä¢ Most commands have a '--help' option"
        echo ""
    silent: true
  init:
    desc: Initialize development environment
    cmds:
      - task: check-tools
      - task: setup-hooks
      - task: setup
      - task: verify-setup
    silent: true
  setup:
    desc: Install all development tools and dependencies
    cmds:
      - task: swift:setup
      - task: security:setup
      - task: sonar:setup
      - task: markdown:setup
    silent: true
  check-tools:
    # Internal task - checks required development tools
    cmds:
      - |
        echo "üîç Checking development tools..."
        missing_tools=0

        # Check for git
        if ! command -v git &> /dev/null; then
          echo "‚ùå git is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "‚úÖ git $(git --version | awk '{print $3}')"
        fi

        # Check for Swift
        if ! command -v swift &> /dev/null; then
          echo "‚ùå Swift is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "‚úÖ Swift $(swift --version | head -1 | awk '{print $4}')"
        fi

        # Check for SwiftLint (required)
        if ! command -v swiftlint &> /dev/null; then
          echo "‚ùå SwiftLint is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "‚úÖ SwiftLint $(swiftlint version)"
        fi

        # Check for Semgrep (optional)
        if ! command -v semgrep &> /dev/null; then
          echo "‚ö†Ô∏è  Semgrep not installed (optional but recommended)"
          echo "   Install with: brew install semgrep"
        else
          echo "‚úÖ Semgrep $(semgrep --version | head -1)"
        fi

        if [ $missing_tools -gt 0 ]; then
          exit 1
        fi
    silent: true
  setup-hooks:
    # Internal task - configures git hooks for development
    vars:
      CURRENT_HOOKS_PATH:
        sh: git config core.hooksPath || echo ""
    status:
      - test "{{.CURRENT_HOOKS_PATH}}" = "{{.HOOKS_PATH}}"
    cmds:
      - |
        echo "üîß Setting up MagSafe Guard development environment..."

        # Configure git to use our hooks directory
        git config core.hooksPath {{.HOOKS_PATH}}
        chmod +x {{.HOOKS_PATH}}/* 2>/dev/null || true

        echo "‚úÖ Git hooks configured"

        # Check if Semgrep is installed
        if command -v semgrep &> /dev/null; then
          echo "‚úÖ Semgrep is installed (version: $(semgrep --version | head -1))"
        else
          echo "‚ÑπÔ∏è  Semgrep not installed (optional but recommended)"
          echo "   To install: brew install semgrep"
          echo "   Pre-commit will still run basic security checks"
        fi

        echo ""
        echo "Git hooks will now:"
        echo "  ‚Ä¢ Check for hardcoded secrets in Swift files"
        echo "  ‚Ä¢ Detect private key files"
        echo "  ‚Ä¢ Prevent committing .env files"
        echo "  ‚Ä¢ Run Semgrep scan (if installed)"
        echo "  ‚Ä¢ Validate commit message format (Conventional Commits)"
        echo "  ‚Ä¢ Block certain words in commit messages"
        echo ""
        echo "To bypass hooks in emergencies: git commit --no-verify"
        echo "To skip Semgrep only: SKIP_SEMGREP=1 git commit"
    silent: true
  verify-setup:
    # Internal task - verifies development setup
    cmds:
      - |
        echo ""
        echo "üéâ Development environment ready!"
        echo ""
        echo "Git hooks installed:"
        hooks_path=$(git config core.hooksPath)
        if [ -n "$hooks_path" ]; then
          echo "  ‚Ä¢ Pre-commit: Security scanning"
          echo "  ‚Ä¢ Commit-msg: Conventional commits validation"
        fi
        echo ""
        echo "Next steps:"
        echo "  1. Make changes to the code"
        echo "  2. Commit with conventional format: git commit -m 'feat: description'"
        echo "  3. Run 'task test' before pushing"
    silent: true
  test:
    desc: Run all tests
    silent: true
    cmds:
      - task: security:secrets
      - task: swift:test
      - echo "‚úÖ All tests passed!"
  clean:
    desc: Clean build artifacts (alias for swift:clean)
    silent: true
    cmds:
      - task: swift:clean
  run:
    desc: Build and run MagSafe Guard as a menu bar app
    silent: true
    cmds:
      - |
        echo "üîç Checking for existing MagSafe Guard instances..."

        # Kill any existing MagSafeGuard processes gracefully
        if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
          echo "Found running MagSafe Guard process(es). Terminating..."
          # Try graceful termination first
          killall MagSafeGuard 2>/dev/null || true
          # Wait a moment for graceful shutdown
          sleep 1
          # Force kill if still running
          if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
            echo "Force terminating stubborn processes..."
            killall -9 MagSafeGuard 2>/dev/null || true
          fi
          echo "‚úÖ Previous instances terminated"
        else
          echo "‚úÖ No existing instances found"
        fi

        echo ""
        echo "üî® Building MagSafe Guard..."

        # Build in release mode for better performance
        swift build -c release

        # Find the built executable
        EXECUTABLE_PATH=".build/release/MagSafeGuard"

        if [ ! -f "$EXECUTABLE_PATH" ]; then
          echo "‚ùå Build failed or executable not found"
          exit 1
        fi

        echo "‚úÖ Build complete"

        # Create a minimal app bundle structure
        APP_NAME="MagSafeGuard.app"
        APP_PATH="/tmp/$APP_NAME"
        CONTENTS_PATH="$APP_PATH/Contents"
        MACOS_PATH="$CONTENTS_PATH/MacOS"

        echo "üì¶ Creating app bundle..."

        # Remove old app if exists
        rm -rf "$APP_PATH"

        # Create directory structure
        mkdir -p "$MACOS_PATH"

        # Copy executable
        cp "$EXECUTABLE_PATH" "$MACOS_PATH/MagSafeGuard"

        # Create Info.plist
        cat > "$CONTENTS_PATH/Info.plist" <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>MagSafeGuard</string>
            <key>CFBundleIdentifier</key>
            <string>com.lekman.MagSafeGuard</string>
            <key>CFBundleName</key>
            <string>MagSafe Guard</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF

        echo "‚úÖ App bundle created at: $APP_PATH"
        echo "üöÄ Launching MagSafe Guard..."
        echo ""
        echo "‚ÑπÔ∏è  The app will run in the menu bar (top right of your screen)"
        echo "‚ÑπÔ∏è  Look for 'MG' text or a shield icon"
        echo ""

        # Launch the app
        open "$APP_PATH"

        echo ""
        echo "‚úÖ MagSafe Guard is now running in your menu bar!"
        echo ""
        echo "üí° Tips:"
        echo "   - Look for 'MG' text or shield icon in the menu bar"
        echo "   - Click the icon to see the menu"
        echo "   - Select 'Arm' to enable protection"
        echo "   - Select 'Show Demo...' to test power monitoring"
        echo ""
        echo "To stop the app: Click the menu bar icon and select 'Quit MagSafe Guard'"
  run:debug:
    desc: Build and run MagSafe Guard in debug mode
    cmds:
      - |
        echo "üî® Building MagSafe Guard (debug mode)..."

        # Build in debug mode
        swift build

        # Find the built executable
        EXECUTABLE_PATH=".build/debug/MagSafeGuard"

        if [ ! -f "$EXECUTABLE_PATH" ]; then
          echo "‚ùå Build failed or executable not found"
          exit 1
        fi

        echo "‚úÖ Build complete"

        # Create a minimal app bundle structure
        APP_NAME="MagSafeGuard-Debug.app"
        APP_PATH="/tmp/$APP_NAME"
        CONTENTS_PATH="$APP_PATH/Contents"
        MACOS_PATH="$CONTENTS_PATH/MacOS"

        echo "üì¶ Creating debug app bundle..."

        # Remove old app if exists
        rm -rf "$APP_PATH"

        # Create directory structure
        mkdir -p "$MACOS_PATH"

        # Copy executable
        cp "$EXECUTABLE_PATH" "$MACOS_PATH/MagSafeGuard"

        # Create Info.plist
        cat > "$CONTENTS_PATH/Info.plist" <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>MagSafeGuard</string>
            <key>CFBundleIdentifier</key>
            <string>com.lekman.MagSafeGuard.debug</string>
            <key>CFBundleName</key>
            <string>MagSafe Guard (Debug)</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF

        echo "‚úÖ Debug app bundle created"
        echo "üöÄ Launching MagSafe Guard (Debug)..."

        # Launch the app
        open "$APP_PATH"

        echo ""
        echo "‚úÖ Running in debug mode - check console for debug output"
  dev:setup:
    desc: Complete development setup (hooks + tools)
    silent: true
    cmds:
      - task: init
      - |
        echo ""
        echo "üì¶ Setting up development tools..."

        # Check if Homebrew is installed
        if command -v brew &> /dev/null; then
          echo "Checking and updating tools via Homebrew..."
          
          # Install/Update Semgrep
          if ! command -v semgrep &> /dev/null; then
            echo "üì¶ Installing Semgrep..."
            brew install semgrep
          else
            echo "‚úÖ Semgrep already installed"
            if brew outdated | grep -q "^semgrep"; then
              echo "üì¶ Updating Semgrep..."
              brew upgrade semgrep
            fi
          fi
          
          # Install/Update SwiftLint (required)
          if ! command -v swiftlint &> /dev/null; then
            echo "üì¶ Installing SwiftLint..."
            brew install swiftlint
          else
            echo "‚úÖ SwiftLint already installed ($(swiftlint version))"
            if brew outdated | grep -q "^swiftlint"; then
              echo "üì¶ Updating SwiftLint..."
              brew upgrade swiftlint
            fi
          fi
          
          # Install/Update markdownlint
          if ! command -v markdownlint &> /dev/null; then
            echo "üì¶ Installing markdownlint..."
            brew install markdownlint-cli
          else
            echo "‚úÖ markdownlint already installed"
            if brew outdated | grep -q "^markdownlint-cli"; then
              echo "üì¶ Updating markdownlint..."
              brew upgrade markdownlint-cli
            fi
          fi
          
          echo "‚úÖ Development tools setup complete"
        else
          echo "‚ö†Ô∏è  Homebrew not found. Install tools manually:"
          echo "   - Semgrep: https://semgrep.dev/docs/getting-started/"
          echo "   - SwiftLint: https://github.com/realm/SwiftLint"
          echo "   - markdownlint: npm install -g markdownlint-cli"
        fi
  qa:
    desc: Run standard quality assurance checks
    silent: true
    cmds:
      - echo "üî¨ Running standard QA suite..."
      - task: qa:fix
      - task: swift:test:coverage
      - task: swift:lint
      - task: yaml:lint
      - task: markdown:lint
      - task: security:scan
      - task: swift:sbom
      - task: docs:update
      - echo "‚úÖ Standard QA suite passed!"
  qa:quick:
    desc: Quick QA checks for git hooks
    silent: true
    cmds:
      - echo "‚ö° Running quick QA checks..."
      - task: swift:lint
      - task: yaml:validate
      - task: markdown:lint
      - task: security:secrets
      - echo "‚úÖ Quick QA checks passed!"
  qa:fix:
    desc: Auto-fix all fixable issues
    silent: true
    cmds:
      - echo "üîß Auto-fixing issues..."
      - task: swift:lint:fix
      - task: yaml:lint:fix
      - task: markdown:lint:fix
      - task: markdown:pr:fix
      - echo "‚úÖ Auto-fix complete!"
  qa:full:
    desc: Full QA suite including SonarCloud analysis
    silent: true
    cmds:
      - echo "üöÄ Running full QA suite with SonarCloud..."
      - task: qa
      - task: sonar:scan
      - echo "‚úÖ Full QA suite with SonarCloud completed!"
  # Aliases for backward compatibility
  pre-push:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "‚ö†Ô∏è  'pre-push' is deprecated. Use 'task qa' instead."
      - task: qa
  pre-pr:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "‚ö†Ô∏è  'pre-pr' is deprecated. Use 'task qa' instead."
      - task: qa
  commit:
    desc: Interactive commit with conventional format
    silent: true
    cmds:
      - |
        echo "üìù Creating conventional commit..."
        echo ""
        echo "Select commit type:"
        echo "  1) feat     - New feature"
        echo "  2) fix      - Bug fix"
        echo "  3) docs     - Documentation"
        echo "  4) style    - Code style"
        echo "  5) refactor - Code refactoring"
        echo "  6) test     - Tests"
        echo "  7) chore    - Maintenance"
        echo ""
        read -p "Enter number (1-7): " type_num

        case $type_num in
          1) type="feat";;
          2) type="fix";;
          3) type="docs";;
          4) type="style";;
          5) type="refactor";;
          6) type="test";;
          7) type="chore";;
          *) echo "Invalid selection"; exit 1;;
        esac

        read -p "Enter scope (optional, press enter to skip): " scope
        read -p "Enter commit message: " message

        if [ -n "$scope" ]; then
          commit_msg="${type}(${scope}): ${message}"
        else
          commit_msg="${type}: ${message}"
        fi

        echo ""
        echo "Commit message: $commit_msg"
        read -p "Proceed? (y/n): " confirm

        if [ "$confirm" = "y" ]; then
          git commit -m "$commit_msg"
        else
          echo "Commit cancelled"
        fi
    interactive: true
  docs:update:
    desc: Update TaskMaster progress to main README
    silent: true
    cmds:
      - |
        task-master sync-readme >/dev/null 2>&1
  # Module shortcuts for easy discovery
  "swift:":
    desc: Show Swift development tasks
    silent: true
    cmds:
      - task: swift:default
  "security:":
    desc: Show security scanning tasks
    silent: true
    cmds:
      - task: security:default
  "sonar:":
    desc: Show SonarCloud analysis tasks
    silent: true
    cmds:
      - task: sonar:default
  "markdown:":
    desc: Show markdown linting tasks
    silent: true
    cmds:
      - task: markdown:default
  "yaml:":
    desc: Show YAML validation tasks
    silent: true
    cmds:
      - task: yaml:default
  "git:":
    desc: Show Git and GitHub tasks
    silent: true
    cmds:
      - task: git:default
