version: "3"
includes:
  sonar:
    taskfile: ./tasks/sonar.yml
    optional: false
  swift:
    taskfile: ./tasks/swift.yml
    optional: false
  security:
    taskfile: ./tasks/security.yml
    optional: false
  markdown:
    taskfile: ./tasks/markdown.yml
    optional: false
  yaml:
    taskfile: ./tasks/yaml.yml
    optional: false
  git:
    taskfile: ./tasks/git.yml
    optional: false
vars:
  HOOKS_PATH: .githooks
  SEMGREP_CONFIG: auto
tasks:
  default:
    desc: Show available tasks
    cmds:
      - |
        echo "🚀 MagSafe Guard Development Tasks"
        echo "=================================="
        echo ""
        echo "🔧 Core Commands:"
        echo "  task init          - Initialize development environment"
        echo "  task run           - Build and run MagSafe Guard"
        echo "  task test          - Run all tests"
        echo "  task clean         - Clean build artifacts"
        echo ""
        echo "✅ Quality Assurance:"
        echo "  task qa            - Run standard QA checks"
        echo "  task qa:quick      - Quick checks (for git hooks)"
        echo "  task qa:fix        - Auto-fix all fixable issues"
        echo "  task qa:full       - Full QA with SonarCloud"
        echo ""
        echo "📦 Module Commands:"
        echo "  task swift:        - Swift development tasks"
        echo "  task security:     - Security scanning tasks"
        echo "  task sonar:        - SonarCloud analysis"
        echo "  task markdown:     - Markdown linting"
        echo "  task yaml:         - YAML validation and linting"
        echo "  task git:          - Git and GitHub tasks"
        echo ""
        echo "💡 Tips:"
        echo "  • Use 'task <module>:' to see module-specific tasks"
        echo "  • Use 'task --list' to see all available tasks"
        echo "  • Most commands have a '--help' option"
        echo ""
    silent: true
  init:
    desc: Initialize development environment
    cmds:
      - task: check-tools
      - task: setup-hooks
      - task: setup
      - task: verify-setup
    silent: true
  setup:
    desc: Install all development tools and dependencies
    cmds:
      - task: swift:setup
      - task: security:setup
      - task: sonar:setup
      - task: markdown:setup
    silent: true
  check-tools:
    # Internal task - checks required development tools
    cmds:
      - |
        echo "🔍 Checking development tools..."
        missing_tools=0

        # Check for git
        if ! command -v git &> /dev/null; then
          echo "❌ git is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "✅ git $(git --version | awk '{print $3}')"
        fi

        # Check for Swift
        if ! command -v swift &> /dev/null; then
          echo "❌ Swift is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "✅ Swift $(swift --version | head -1 | awk '{print $4}')"
        fi

        # Check for SwiftLint (required)
        if ! command -v swiftlint &> /dev/null; then
          echo "❌ SwiftLint is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "✅ SwiftLint $(swiftlint version)"
        fi

        # Check for Semgrep (optional)
        if ! command -v semgrep &> /dev/null; then
          echo "⚠️  Semgrep not installed (optional but recommended)"
          echo "   Install with: brew install semgrep"
        else
          echo "✅ Semgrep $(semgrep --version | head -1)"
        fi

        if [ $missing_tools -gt 0 ]; then
          exit 1
        fi
    silent: true
  setup-hooks:
    # Internal task - configures git hooks for development
    vars:
      CURRENT_HOOKS_PATH:
        sh: git config core.hooksPath || echo ""
    status:
      - test "{{.CURRENT_HOOKS_PATH}}" = "{{.HOOKS_PATH}}"
    cmds:
      - |
        echo "🔧 Setting up MagSafe Guard development environment..."

        # Configure git to use our hooks directory
        git config core.hooksPath {{.HOOKS_PATH}}
        chmod +x {{.HOOKS_PATH}}/* 2>/dev/null || true

        echo "✅ Git hooks configured"

        # Check if Semgrep is installed
        if command -v semgrep &> /dev/null; then
          echo "✅ Semgrep is installed (version: $(semgrep --version | head -1))"
        else
          echo "ℹ️  Semgrep not installed (optional but recommended)"
          echo "   To install: brew install semgrep"
          echo "   Pre-commit will still run basic security checks"
        fi

        echo ""
        echo "Git hooks will now:"
        echo "  • Check for hardcoded secrets in Swift files"
        echo "  • Detect private key files"
        echo "  • Prevent committing .env files"
        echo "  • Run Semgrep scan (if installed)"
        echo "  • Validate commit message format (Conventional Commits)"
        echo "  • Block certain words in commit messages"
        echo ""
        echo "To bypass hooks in emergencies: git commit --no-verify"
        echo "To skip Semgrep only: SKIP_SEMGREP=1 git commit"
    silent: true
  verify-setup:
    # Internal task - verifies development setup
    cmds:
      - |
        echo ""
        echo "🎉 Development environment ready!"
        echo ""
        echo "Git hooks installed:"
        hooks_path=$(git config core.hooksPath)
        if [ -n "$hooks_path" ]; then
          echo "  • Pre-commit: Security scanning"
          echo "  • Commit-msg: Conventional commits validation"
        fi
        echo ""
        echo "Next steps:"
        echo "  1. Make changes to the code"
        echo "  2. Commit with conventional format: git commit -m 'feat: description'"
        echo "  3. Run 'task test' before pushing"
    silent: true
  test:
    desc: Run all tests
    silent: true
    cmds:
      - task: security:secrets
      - task: swift:test
      - echo "✅ All tests passed!"
  clean:
    desc: Clean build artifacts (alias for swift:clean)
    silent: true
    cmds:
      - task: swift:clean
  run:
    desc: Build and run MagSafe Guard as a menu bar app
    silent: true
    cmds:
      - |
        echo "🔍 Checking for existing MagSafe Guard instances..."

        # Kill any existing MagSafeGuard processes gracefully
        if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
          echo "Found running MagSafe Guard process(es). Terminating..."
          # Try graceful termination first
          killall MagSafeGuard 2>/dev/null || true
          # Wait a moment for graceful shutdown
          sleep 1
          # Force kill if still running
          if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
            echo "Force terminating stubborn processes..."
            killall -9 MagSafeGuard 2>/dev/null || true
          fi
          echo "✅ Previous instances terminated"
        else
          echo "✅ No existing instances found"
        fi

        echo ""
        echo "🔨 Building MagSafe Guard..."

        # Build in release mode for better performance
        swift build -c release

        # Find the built executable
        EXECUTABLE_PATH=".build/release/MagSafeGuard"

        if [ ! -f "$EXECUTABLE_PATH" ]; then
          echo "❌ Build failed or executable not found"
          exit 1
        fi

        echo "✅ Build complete"

        # Create a minimal app bundle structure
        APP_NAME="MagSafeGuard.app"
        APP_PATH=".build/release/$APP_NAME"
        CONTENTS_PATH="$APP_PATH/Contents"
        MACOS_PATH="$CONTENTS_PATH/MacOS"

        echo "📦 Creating app bundle..."

        # Remove old app if exists
        rm -rf "$APP_PATH"

        # Create directory structure
        mkdir -p "$MACOS_PATH"

        # Copy executable
        cp "$EXECUTABLE_PATH" "$MACOS_PATH/MagSafeGuard"

        # Create Info.plist
        cat > "$CONTENTS_PATH/Info.plist" <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>MagSafeGuard</string>
            <key>CFBundleIdentifier</key>
            <string>com.lekman.MagSafeGuard</string>
            <key>CFBundleName</key>
            <string>MagSafe Guard</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF

        echo "✅ App bundle created at: $APP_PATH"

        # Try to sign the app if certificates are available (unless SKIP_CODESIGN is set)
        if [ "$SKIP_CODESIGN" = "1" ]; then
          echo "⚠️  Skipping code signing (SKIP_CODESIGN=1)"
        else
          SIGNING_IDENTITY=$(security find-identity -v -p codesigning 2>/dev/null | grep -E "Developer ID Application|Apple Development" | head -1 | awk '{print $2}')
          
          if [ -n "$SIGNING_IDENTITY" ]; then
          echo "🔐 Signing app with identity: ${SIGNING_IDENTITY:0:8}..."
          
          # Create entitlements file
          ENTITLEMENTS_PATH=".build/release/MagSafeGuard.entitlements"
          cat > "$ENTITLEMENTS_PATH" <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.app-sandbox</key>
            <false/>
            <key>com.apple.developer.aps-environment</key>
            <string>development</string>
            <key>com.apple.developer.icloud-container-identifiers</key>
            <array>
                <string>iCloud.com.lekman.magsafeguard</string>
            </array>
            <key>com.apple.developer.icloud-services</key>
            <array>
                <string>CloudKit</string>
            </array>
        </dict>
        </plist>
        EOF
          
          # Sign the app
          if codesign --force --deep --sign "$SIGNING_IDENTITY" --entitlements "$ENTITLEMENTS_PATH" "$APP_PATH" 2>/dev/null; then
            echo "✅ App signed successfully"
            # Clean up entitlements file
            rm -f "$ENTITLEMENTS_PATH"
          else
            echo "⚠️  Code signing failed, running unsigned"
          fi
          else
            echo "⚠️  No signing identity found, running unsigned"
            echo "   To enable signing, see: docs/maintainers/code-signing.md"
          fi
        fi

        echo "🚀 Launching MagSafe Guard..."
        echo ""
        echo "ℹ️  The app will run in the menu bar (top right of your screen)"
        echo "ℹ️  Look for 'MG' text or a shield icon"
        echo ""

        # Launch the app
        open "$APP_PATH"

        echo ""
        echo "✅ MagSafe Guard is now running in your menu bar!"
        echo ""
        echo "💡 Tips:"
        echo "   - Look for 'MG' text or shield icon in the menu bar"
        echo "   - Click the icon to see the menu"
        echo "   - Select 'Arm' to enable protection"
        echo ""
        echo "To stop the app: Click the menu bar icon and select 'Quit MagSafe Guard' or run 'task run' to replace the app with a new version."

  sign:
    desc: Sign the MagSafe Guard app (requires Developer ID)
    deps: [build]
    cmds:
      - task: swift:sign

  run:unsigned:
    desc: Build and run MagSafe Guard without code signing
    silent: true
    cmds:
      - |
        # Set environment variable to skip signing
        export SKIP_CODESIGN=1
        task run

  build:
    desc: Build MagSafe Guard app bundle
    silent: true
    cmds:
      - |
        echo "🔨 Building MagSafe Guard..."
        swift build -c release

        EXECUTABLE_PATH=".build/release/MagSafeGuard"
        if [ ! -f "$EXECUTABLE_PATH" ]; then
          echo "❌ Build failed"
          exit 1
        fi

        # Create app bundle
        APP_PATH="/tmp/MagSafeGuard.app"
        rm -rf "$APP_PATH"
        mkdir -p "$APP_PATH/Contents/MacOS"

        cp "$EXECUTABLE_PATH" "$APP_PATH/Contents/MacOS/"

        # Create Info.plist
        cat > "$APP_PATH/Contents/Info.plist" <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>MagSafeGuard</string>
            <key>CFBundleIdentifier</key>
            <string>com.lekman.MagSafeGuard</string>
            <key>CFBundleName</key>
            <string>MagSafe Guard</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF

        echo "✅ Build complete: $APP_PATH"

  run:debug:
    desc: Build and run MagSafe Guard in debug mode
    silent: true
    cmds:
      - |
        echo "🔨 Building MagSafe Guard (debug mode)..."

        # Build in debug mode
        swift build

        # Find the built executable
        EXECUTABLE_PATH=".build/debug/MagSafeGuard"

        if [ ! -f "$EXECUTABLE_PATH" ]; then
          echo "❌ Build failed or executable not found"
          exit 1
        fi

        echo "✅ Build complete"

        # Create a minimal app bundle structure
        APP_NAME="MagSafeGuard-Debug.app"
        APP_PATH=".build/debug/$APP_NAME"
        CONTENTS_PATH="$APP_PATH/Contents"
        MACOS_PATH="$CONTENTS_PATH/MacOS"

        echo "📦 Creating debug app bundle..."

        # Remove old app if exists
        rm -rf "$APP_PATH"

        # Create directory structure
        mkdir -p "$MACOS_PATH"

        # Copy executable
        cp "$EXECUTABLE_PATH" "$MACOS_PATH/MagSafeGuard"

        # Create Info.plist
        cat > "$CONTENTS_PATH/Info.plist" <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>MagSafeGuard</string>
            <key>CFBundleIdentifier</key>
            <string>com.lekman.MagSafeGuard.debug</string>
            <key>CFBundleName</key>
            <string>MagSafe Guard (Debug)</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF

        echo "✅ Debug app bundle created"
        echo "🚀 Launching MagSafe Guard (Debug)..."

        # Launch the app
        open "$APP_PATH"

        echo ""
        echo "✅ Running in debug mode - check console for debug output"

  qa:
    desc: Run standard quality assurance checks
    silent: true
    cmds:
      - echo "🔬 Running standard QA suite..."
      - task: qa:fix
      - task: swift:test:coverage
      - task: swift:lint
      - task: yaml:lint
      - task: markdown:lint
      - task: security:scan
      - task: swift:sbom
      - task: docs:update
      - echo "✅ Standard QA suite passed!"
  qa:quick:
    desc: Quick QA checks for git hooks
    silent: true
    cmds:
      - echo "⚡ Running quick QA checks..."
      - task: swift:lint
      - task: yaml:validate
      - task: markdown:lint
      - task: security:secrets
      - echo "✅ Quick QA checks passed!"
  qa:fix:
    desc: Auto-fix all fixable issues
    silent: true
    cmds:
      - echo "🔧 Auto-fixing issues..."
      - task: swift:lint:fix
      - task: yaml:lint:fix
      - task: markdown:lint:fix
      - task: markdown:pr:fix
      - echo "✅ Auto-fix complete!"
  qa:full:
    desc: Full QA suite including SonarCloud analysis
    silent: true
    cmds:
      - echo "🚀 Running full QA suite with SonarCloud..."
      - task: qa
      - task: sonar:scan
      - echo "✅ Full QA suite with SonarCloud completed!"
  # Aliases for backward compatibility
  pre-push:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "⚠️  'pre-push' is deprecated. Use 'task qa' instead."
      - task: qa
  pre-pr:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "⚠️  'pre-pr' is deprecated. Use 'task qa' instead."
      - task: qa
  commit:
    desc: Interactive commit with conventional format
    silent: true
    cmds:
      - |
        echo "📝 Creating conventional commit..."
        echo ""
        echo "Select commit type:"
        echo "  1) feat     - New feature"
        echo "  2) fix      - Bug fix"
        echo "  3) docs     - Documentation"
        echo "  4) style    - Code style"
        echo "  5) refactor - Code refactoring"
        echo "  6) test     - Tests"
        echo "  7) chore    - Maintenance"
        echo ""
        read -p "Enter number (1-7): " type_num

        case $type_num in
          1) type="feat";;
          2) type="fix";;
          3) type="docs";;
          4) type="style";;
          5) type="refactor";;
          6) type="test";;
          7) type="chore";;
          *) echo "Invalid selection"; exit 1;;
        esac

        read -p "Enter scope (optional, press enter to skip): " scope
        read -p "Enter commit message: " message

        if [ -n "$scope" ]; then
          commit_msg="${type}(${scope}): ${message}"
        else
          commit_msg="${type}: ${message}"
        fi

        echo ""
        echo "Commit message: $commit_msg"
        read -p "Proceed? (y/n): " confirm

        if [ "$confirm" = "y" ]; then
          git commit -m "$commit_msg"
        else
          echo "Commit cancelled"
        fi
    interactive: true
  docs:update:
    desc: Update TaskMaster progress to main README
    silent: true
    cmds:
      - |
        task-master sync-readme >/dev/null 2>&1
  # Module shortcuts for easy discovery
  "swift:":
    desc: Show Swift development tasks
    silent: true
    cmds:
      - task: swift:default
  "security:":
    desc: Show security scanning tasks
    silent: true
    cmds:
      - task: security:default
  "sonar:":
    desc: Show SonarCloud analysis tasks
    silent: true
    cmds:
      - task: sonar:default
  "markdown:":
    desc: Show markdown linting tasks
    silent: true
    cmds:
      - task: markdown:default
  "yaml:":
    desc: Show YAML validation tasks
    silent: true
    cmds:
      - task: yaml:default
  "git:":
    desc: Show Git and GitHub tasks
    silent: true
    cmds:
      - task: git:default
