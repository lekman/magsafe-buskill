version: "3"
includes:
  sonar:
    taskfile: ./tasks/sonar.yml
    optional: false
  swift:
    taskfile: ./tasks/swift.yml
    optional: false
  security:
    taskfile: ./tasks/security.yml
    optional: false
  markdown:
    taskfile: ./tasks/markdown.yml
    optional: false
  yaml:
    taskfile: ./tasks/yaml.yml
    optional: false
  git:
    taskfile: ./tasks/git.yml
    optional: false
vars:
  HOOKS_PATH: .githooks
  SEMGREP_CONFIG: auto
tasks:
  default:
    desc: Show available tasks
    cmds:
      - |
        echo "🚀 MagSafe Guard Development Tasks"
        echo "=================================="
        echo ""
        echo "🔧 Core Commands:"
        echo "  task init          - Initialize development environment"
        echo "  task test          - Run all tests"
        echo "  task clean         - Clean build artifacts"
        echo ""
        echo "✅ Quality Assurance:"
        echo "  task qa            - Run standard QA checks"
        echo "  task qa:quick      - Quick checks (for git hooks)"
        echo "  task qa:fix        - Auto-fix all fixable issues"
        echo "  task qa:full       - Full QA with SonarCloud"
        echo ""
        echo "📦 Module Commands:"
        echo "  task swift:        - Swift development tasks"
        echo "  task security:     - Security scanning tasks"
        echo "  task sonar:        - SonarCloud analysis"
        echo "  task markdown:     - Markdown linting"
        echo "  task yaml:         - YAML validation and linting"
        echo "  task git:          - Git and GitHub tasks"
        echo ""
        echo "💡 Tips:"
        echo "  • Use 'task <module>:' to see module-specific tasks"
        echo "  • Use 'task --list' to see all available tasks"
        echo "  • Most commands have a '--help' option"
        echo ""
    silent: true
  init:
    desc: Initialize development environment
    cmds:
      - task: check-tools
      - task: setup-hooks
      - task: setup
      - task: verify-setup
    silent: true
  setup:
    desc: Install all development tools and dependencies
    cmds:
      - task: swift:setup
      - task: security:setup
      - task: sonar:setup
      - task: markdown:setup
    silent: true
  check-tools:
    # Internal task - checks required development tools
    cmds:
      - |
        echo "🔍 Checking development tools..."
        missing_tools=0

        # Check for git
        if ! command -v git &> /dev/null; then
          echo "❌ git is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "✅ git $(git --version | awk '{print $3}')"
        fi

        # Check for Swift
        if ! command -v swift &> /dev/null; then
          echo "❌ Swift is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "✅ Swift $(swift --version | head -1 | awk '{print $4}')"
        fi

        # Check for SwiftLint (required)
        if ! command -v swiftlint &> /dev/null; then
          echo "❌ SwiftLint is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "✅ SwiftLint $(swiftlint version)"
        fi

        # Check for Semgrep (optional)
        if ! command -v semgrep &> /dev/null; then
          echo "⚠️  Semgrep not installed (optional but recommended)"
          echo "   Install with: brew install semgrep"
        else
          echo "✅ Semgrep $(semgrep --version | head -1)"
        fi

        if [ $missing_tools -gt 0 ]; then
          exit 1
        fi
    silent: true
  setup-hooks:
    # Internal task - configures git hooks for development
    vars:
      CURRENT_HOOKS_PATH:
        sh: git config core.hooksPath || echo ""
    status:
      - test "{{.CURRENT_HOOKS_PATH}}" = "{{.HOOKS_PATH}}"
    cmds:
      - |
        echo "🔧 Setting up MagSafe Guard development environment..."

        # Configure git to use our hooks directory
        git config core.hooksPath {{.HOOKS_PATH}}
        chmod +x {{.HOOKS_PATH}}/* 2>/dev/null || true

        echo "✅ Git hooks configured"

        # Check if Semgrep is installed
        if command -v semgrep &> /dev/null; then
          echo "✅ Semgrep is installed (version: $(semgrep --version | head -1))"
        else
          echo "ℹ️  Semgrep not installed (optional but recommended)"
          echo "   To install: brew install semgrep"
          echo "   Pre-commit will still run basic security checks"
        fi

        echo ""
        echo "Git hooks will now:"
        echo "  • Check for hardcoded secrets in Swift files"
        echo "  • Detect private key files"
        echo "  • Prevent committing .env files"
        echo "  • Run Semgrep scan (if installed)"
        echo "  • Validate commit message format (Conventional Commits)"
        echo "  • Block certain words in commit messages"
        echo ""
        echo "To bypass hooks in emergencies: git commit --no-verify"
        echo "To skip Semgrep only: SKIP_SEMGREP=1 git commit"
    silent: true
  verify-setup:
    # Internal task - verifies development setup
    cmds:
      - |
        echo ""
        echo "🎉 Development environment ready!"
        echo ""
        echo "Git hooks installed:"
        hooks_path=$(git config core.hooksPath)
        if [ -n "$hooks_path" ]; then
          echo "  • Pre-commit: Security scanning"
          echo "  • Commit-msg: Conventional commits validation"
        fi
        echo ""
        echo "Next steps:"
        echo "  1. Make changes to the code"
        echo "  2. Commit with conventional format: git commit -m 'feat: description'"
        echo "  3. Run 'task test' before pushing"
    silent: true

  flags:
    desc: Configure feature flags interactively
    silent: true
    cmds:
      - |
        echo "🚩 MagSafe Guard Feature Flag Configuration"
        echo "=========================================="
        echo ""

        # Check if .env exists
        if [ ! -f .env ]; then
          if [ -f .env.example ]; then
            echo "Creating .env from .env.example..."
            cp .env.example .env
          else
            echo "Creating new .env file..."
            touch .env
          fi
        fi

        # Function to update or add flag
        update_flag() {
          local key=$1
          local value=$2
          if grep -q "^$key=" .env; then
            # Update existing
            if [[ "$OSTYPE" == "darwin"* ]]; then
              sed -i '' "s/^$key=.*/$key=$value/" .env
            else
              sed -i "s/^$key=.*/$key=$value/" .env
            fi
          else
            # Add new
            echo "$key=$value" >> .env
          fi
        }

        # Core features
        echo "Core Features:"
        echo "--------------"

        echo -n "Enable Power Monitoring? (core functionality) [Y/n]: "
        read -r power_monitoring
        power_monitoring=${power_monitoring:-Y}
        update_flag "FEATURE_POWER_MONITORING" $([ "${power_monitoring^^}" = "Y" ] && echo "true" || echo "false")

        echo -n "Enable Accessibility Manager? (required for system actions) [Y/n]: "
        read -r accessibility
        accessibility=${accessibility:-Y}
        update_flag "FEATURE_ACCESSIBILITY" $([ "${accessibility^^}" = "Y" ] && echo "true" || echo "false")

        echo -n "Enable Notifications? [Y/n]: "
        read -r notifications
        notifications=${notifications:-Y}
        update_flag "FEATURE_NOTIFICATIONS" $([ "${notifications^^}" = "Y" ] && echo "true" || echo "false")

        echo -n "Enable Authentication (Touch ID)? [Y/n]: "
        read -r auth
        auth=${auth:-Y}
        update_flag "FEATURE_AUTHENTICATION" $([ "${auth^^}" = "Y" ] && echo "true" || echo "false")

        echo ""
        echo "Optional Features:"
        echo "------------------"

        echo -n "Enable Auto-Arm Manager? [y/N]: "
        read -r auto_arm
        auto_arm=${auto_arm:-N}
        update_flag "FEATURE_AUTO_ARM" $([ "${auto_arm^^}" = "Y" ] && echo "true" || echo "false")

        echo -n "Enable Location Services? [y/N]: "
        read -r location
        location=${location:-N}
        update_flag "FEATURE_LOCATION" $([ "${location^^}" = "Y" ] && echo "true" || echo "false")

        echo -n "Enable Network Monitor? [y/N]: "
        read -r network
        network=${network:-N}
        update_flag "FEATURE_NETWORK_MONITOR" $([ "${network^^}" = "Y" ] && echo "true" || echo "false")

        echo -n "Enable Security Evidence Collection? [y/N]: "
        read -r evidence
        evidence=${evidence:-N}
        update_flag "FEATURE_SECURITY_EVIDENCE" $([ "${evidence^^}" = "Y" ] && echo "true" || echo "false")

        echo -n "Enable iCloud Sync? [y/N]: "
        read -r cloud
        cloud=${cloud:-N}
        update_flag "FEATURE_CLOUD_SYNC" $([ "${cloud^^}" = "Y" ] && echo "true" || echo "false")

        echo ""
        echo "Telemetry & Monitoring:"
        echo "-----------------------"

        echo -n "Enable Sentry crash reporting? [y/N]: "
        read -r sentry
        sentry=${sentry:-N}
        update_flag "SENTRY_ENABLED" $([ "${sentry^^}" = "Y" ] && echo "true" || echo "false")

        if [ "${sentry^^}" = "Y" ]; then
          echo -n "Enable Sentry debug mode? [y/N]: "
          read -r sentry_debug
          sentry_debug=${sentry_debug:-N}
          update_flag "SENTRY_DEBUG" $([ "${sentry_debug^^}" = "Y" ] && echo "true" || echo "false")

          # Add DSN if not present
          if ! grep -q "^SENTRY_DSN=" .env; then
            update_flag "SENTRY_DSN" "https://e74a158126b00e128ebdda98f6a36b76@o4509752039243776.ingest.de.sentry.io/4509752042127440"
          fi
        fi

        echo -n "Enable Performance Metrics? [y/N]: "
        read -r metrics
        metrics=${metrics:-N}
        update_flag "FEATURE_PERFORMANCE_METRICS" $([ "${metrics^^}" = "Y" ] && echo "true" || echo "false")

        echo ""
        echo "Debug Options:"
        echo "--------------"

        echo -n "Enable Verbose Logging? [y/N]: "
        read -r verbose
        verbose=${verbose:-N}
        update_flag "DEBUG_VERBOSE_LOGGING" $([ "${verbose^^}" = "Y" ] && echo "true" || echo "false")

        echo ""
        echo "✅ Feature flags configured in .env"
        echo ""
        echo "Current configuration:"
        echo "---------------------"
        grep -E "^(FEATURE_|SENTRY_|DEBUG_)" .env | sed 's/^/  /'
        echo ""
        echo "To apply changes, restart MagSafe Guard."
  test:
    desc: Run all tests
    silent: true
    cmds:
      - task: security:secrets
      - task: swift:test
      - echo "✅ All tests passed!"
  clean:
    desc: Clean build artifacts (alias for swift:clean)
    silent: true
    cmds:
      - task: swift:clean
  build:
    desc: Build MagSafe Guard app bundle using Swift Bundler
    silent: true
    deps: [swift:setup-bundler]
    cmds:
      - |
        echo "🔨 Building MagSafe Guard app bundle..."

        # Ensure Swift Bundler is available
        BUNDLER="./swift-bundler"
        if [ ! -f "$BUNDLER" ]; then
          echo "Setting up Swift Bundler..."
          task swift:setup-bundler
        fi

        # Clean previous build
        rm -rf ./.build/bundler/MagSafeGuard.app

        # Build with Swift Bundler
        echo "Building universal binary..."
        if $BUNDLER bundle --configuration release --universal; then
          echo "✅ Build complete!"
          echo ""
          echo "App bundle: ./.build/bundler/MagSafeGuard.app"
          echo ""
          echo "Next steps:"
          echo "  • Open in Xcode: open MagSafeGuard.xcodeproj"
          echo "  • Sign the app: task swift:sign"
          echo "  • Create installer: task swift:package"
        else
          echo "❌ Build failed"
          exit 1
        fi
  qa:
    desc: Run standard quality assurance checks
    silent: true
    cmds:
      - echo "🔬 Running standard QA suite..."
      - task: qa:fix
      - task: swift:test:coverage
      - task: swift:lint
      - task: yaml:lint
      - task: markdown:lint
      - task: security:scan
      - task: swift:sbom
      - task: docs:update
      - echo "✅ Standard QA suite passed!"
  qa:quick:
    desc: Quick QA checks for git hooks
    silent: true
    cmds:
      - echo "⚡ Running quick QA checks..."
      - task: swift:lint
      - task: yaml:validate
      - task: markdown:lint
      - task: security:secrets
      - echo "✅ Quick QA checks passed!"
  qa:fix:
    desc: Auto-fix all fixable issues
    silent: true
    cmds:
      - echo "🔧 Auto-fixing issues..."
      - task: swift:lint:fix
      - task: yaml:lint:fix
      - task: markdown:lint:fix
      - task: markdown:pr:fix
      - echo "✅ Auto-fix complete!"
  qa:full:
    desc: Full QA suite including SonarCloud analysis
    silent: true
    cmds:
      - echo "🚀 Running full QA suite with SonarCloud..."
      - task: qa
      - task: sonar:scan
      - echo "✅ Full QA suite with SonarCloud completed!"
  commit:
    desc: Interactive commit with conventional format
    silent: true
    cmds:
      - |
        echo "📝 Creating conventional commit..."
        echo ""
        echo "Select commit type:"
        echo "  1) feat     - New feature"
        echo "  2) fix      - Bug fix"
        echo "  3) docs     - Documentation"
        echo "  4) style    - Code style"
        echo "  5) refactor - Code refactoring"
        echo "  6) test     - Tests"
        echo "  7) chore    - Maintenance"
        echo ""
        read -p "Enter number (1-7): " type_num

        case $type_num in
          1) type="feat";;
          2) type="fix";;
          3) type="docs";;
          4) type="style";;
          5) type="refactor";;
          6) type="test";;
          7) type="chore";;
          *) echo "Invalid selection"; exit 1;;
        esac

        read -p "Enter scope (optional, press enter to skip): " scope
        read -p "Enter commit message: " message

        if [ -n "$scope" ]; then
          commit_msg="${type}(${scope}): ${message}"
        else
          commit_msg="${type}: ${message}"
        fi

        echo ""
        echo "Commit message: $commit_msg"
        read -p "Proceed? (y/n): " confirm

        if [ "$confirm" = "y" ]; then
          git commit -m "$commit_msg"
        else
          echo "Commit cancelled"
        fi
    interactive: true
  docs:update:
    desc: Update TaskMaster progress to main README
    silent: true
    cmds:
      - |
        task-master sync-readme >/dev/null 2>&1
  # Module shortcuts for easy discovery
  "swift:":
    desc: Show Swift development tasks
    silent: true
    cmds:
      - task: swift:default
  "security:":
    desc: Show security scanning tasks
    silent: true
    cmds:
      - task: security:default
  "sonar:":
    desc: Show SonarCloud analysis tasks
    silent: true
    cmds:
      - task: sonar:default
  "markdown:":
    desc: Show markdown linting tasks
    silent: true
    cmds:
      - task: markdown:default
  "yaml:":
    desc: Show YAML validation tasks
    silent: true
    cmds:
      - task: yaml:default
  "git:":
    desc: Show Git and GitHub tasks
    silent: true
    cmds:
      - task: git:default
