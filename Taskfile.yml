version: "3"
includes:
  sonar:
    taskfile: ./tasks/sonar.yml
    optional: false
  swift:
    taskfile: ./tasks/swift.yml
    optional: false
  security:
    taskfile: ./tasks/security.yml
    optional: false
  markdown:
    taskfile: ./tasks/markdown.yml
    optional: false
  yaml:
    taskfile: ./tasks/yaml.yml
    optional: false
  git:
    taskfile: ./tasks/git.yml
    optional: false
vars:
  HOOKS_PATH: .githooks
  SEMGREP_CONFIG: auto
tasks:
  default:
    desc: Show available tasks
    cmds:
      - "echo \"\U0001F680 MagSafe Guard Development Tasks\"\necho \"=================================\"\necho \"\"\necho \"\U0001F527 Core Commands:\"\necho \"  task init          - Initialize development environment\"\necho \"  task run           - Build and run MagSafe Guard\"\necho \"  task test          - Run all tests\"\necho \"  task clean         - Clean build artifacts\"\necho \"\"\necho \"✅ Quality Assurance:\"\necho \"  task qa            - Run standard QA checks\"\necho \"  task qa:quick      - Quick checks (for git hooks)\"\necho \"  task qa:fix        - Auto-fix all fixable issues\"\necho \"  task qa:full       - Full QA with SonarCloud\"\necho \"\"\necho \"\U0001F4E6 Module Commands:\"\necho \"  task swift:        - Swift development tasks\"\necho \"  task security:     - Security scanning tasks\"\necho \"  task sonar:        - SonarCloud analysis\"\necho \"  task markdown:     - Markdown linting\"\necho \"  task yaml:         - YAML validation and linting\"\necho \"\"\necho \"\U0001F4A1 Tips:\"\necho \"  • Use 'task <module>:' to see module-specific tasks\"\necho \"  • Use 'task --list' to see all available tasks\"\necho \"  • Most commands have a '--help' option\"\necho \"\"\n"
    silent: true
  init:
    desc: Initialize development environment
    cmds:
      - task: check-tools
      - task: setup-hooks
      - task: setup
      - task: verify-setup
    silent: true
  setup:
    desc: Install all development tools and dependencies
    cmds:
      - task: swift:setup
      - task: security:setup
      - task: sonar:setup
      - task: markdown:setup
    silent: true
  check-tools:
    # Internal task - checks required development tools
    cmds:
      - "echo \"\U0001F50D Checking development tools...\"\nmissing_tools=0\n\n# Check for git\nif ! command -v git &> /dev/null; then\n  echo \"❌ git is not installed\"\n  missing_tools=$((missing_tools + 1))\nelse\n  echo \"✅ git $(git --version | awk '{print $3}')\"\nfi\n\n# Check for Swift\nif ! command -v swift &> /dev/null; then\n  echo \"❌ Swift is not installed\"\n  missing_tools=$((missing_tools + 1))\nelse\n  echo \"✅ Swift $(swift --version | head -1 | awk '{print $4}')\"\nfi\n\n# Check for SwiftLint (required)\nif ! command -v swiftlint &> /dev/null; then\n  echo \"❌ SwiftLint is not installed\"\n  missing_tools=$((missing_tools + 1))\nelse\n  echo \"✅ SwiftLint $(swiftlint version)\"\nfi\n\n# Check for Semgrep (optional)\nif ! command -v semgrep &> /dev/null; then\n  echo \"⚠️  Semgrep not installed (optional but recommended)\"\n  echo \"   Install with: brew install semgrep\"\nelse\n  echo \"✅ Semgrep $(semgrep --version | head -1)\"\nfi\n\nif [ $missing_tools -gt 0 ]; then\n  exit 1\nfi\n"
    silent: true
  setup-hooks:
    # Internal task - configures git hooks for development
    vars:
      CURRENT_HOOKS_PATH:
        sh: git config core.hooksPath || echo ""
    status:
      - test "{{.CURRENT_HOOKS_PATH}}" = "{{.HOOKS_PATH}}"
    cmds:
      - "echo \"\U0001F527 Setting up MagSafe Guard development environment...\"\n\n# Configure git to use our hooks directory\ngit config core.hooksPath {{.HOOKS_PATH}}\nchmod +x {{.HOOKS_PATH}}/* 2>/dev/null || true\n\necho \"✅ Git hooks configured\"\n\n# Check if Semgrep is installed\nif command -v semgrep &> /dev/null; then\n  echo \"✅ Semgrep is installed (version: $(semgrep --version | head -1))\"\nelse\n  echo \"ℹ️  Semgrep not installed (optional but recommended)\"\n  echo \"   To install: brew install semgrep\"\n  echo \"   Pre-commit will still run basic security checks\"\nfi\n\necho \"\"\necho \"Git hooks will now:\"\necho \"  • Check for hardcoded secrets in Swift files\"\necho \"  • Detect private key files\"\necho \"  • Prevent committing .env files\"\necho \"  • Run Semgrep scan (if installed)\"\necho \"  • Validate commit message format (Conventional Commits)\"\necho \"  • Block certain words in commit messages\"\necho \"\"\necho \"To bypass hooks in emergencies: git commit --no-verify\"\necho \"To skip Semgrep only: SKIP_SEMGREP=1 git commit\"\n"
    silent: true
  verify-setup:
    # Internal task - verifies development setup
    cmds:
      - "echo \"\"\necho \"\U0001F389 Development environment ready!\"\necho \"\"\necho \"Git hooks installed:\"\nhooks_path=$(git config core.hooksPath)\nif [ -n \"$hooks_path\" ]; then\n  echo \"  • Pre-commit: Security scanning\"\n  echo \"  • Commit-msg: Conventional commits validation\"\nfi\necho \"\"\necho \"Next steps:\"\necho \"  1. Make changes to the code\"\necho \"  2. Commit with conventional format: git commit -m 'feat: description'\"\necho \"  3. Run 'task test' before pushing\"\n"
    silent: true
  test:
    desc: Run all tests
    silent: true
    cmds:
      - task: security:secrets
      - task: swift:test
      - echo "✅ All tests passed!"
  clean:
    desc: Clean build artifacts (alias for swift:clean)
    silent: true
    cmds:
      - task: swift:clean
  run:
    desc: Build and run MagSafe Guard as a menu bar app
    silent: true
    cmds:
      - "echo \"\U0001F528 Building MagSafe Guard...\"\n\n# Build in release mode for better performance\nswift build -c release\n\n# Find the built executable\nEXECUTABLE_PATH=\".build/release/MagSafeGuard\"\n\nif [ ! -f \"$EXECUTABLE_PATH\" ]; then\n  echo \"❌ Build failed or executable not found\"\n  exit 1\nfi\n\necho \"✅ Build complete\"\n\n# Create a minimal app bundle structure\nAPP_NAME=\"MagSafeGuard.app\"\nAPP_PATH=\"/tmp/$APP_NAME\"\nCONTENTS_PATH=\"$APP_PATH/Contents\"\nMACOS_PATH=\"$CONTENTS_PATH/MacOS\"\n\necho \"\U0001F4E6 Creating app bundle...\"\n\n# Remove old app if exists\nrm -rf \"$APP_PATH\"\n\n# Create directory structure\nmkdir -p \"$MACOS_PATH\"\n\n# Copy executable\ncp \"$EXECUTABLE_PATH\" \"$MACOS_PATH/MagSafeGuard\"\n\n# Create Info.plist\ncat > \"$CONTENTS_PATH/Info.plist\" <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>CFBundleExecutable</key>\n    <string>MagSafeGuard</string>\n    <key>CFBundleIdentifier</key>\n    <string>com.lekman.MagSafeGuard</string>\n    <key>CFBundleName</key>\n    <string>MagSafe Guard</string>\n    <key>CFBundleShortVersionString</key>\n    <string>1.0</string>\n    <key>CFBundleVersion</key>\n    <string>1</string>\n    <key>LSMinimumSystemVersion</key>\n    <string>13.0</string>\n    <key>LSUIElement</key>\n    <true/>\n    <key>NSHighResolutionCapable</key>\n    <true/>\n</dict>\n</plist>\nEOF\n\necho \"✅ App bundle created at: $APP_PATH\"\necho \"\U0001F680 Launching MagSafe Guard...\"\necho \"\"\necho \"ℹ️  The app will run in the menu bar (top right of your screen)\"\necho \"ℹ️  Look for 'MG' text or a shield icon\"\necho \"\"\n\n# Launch the app\nopen \"$APP_PATH\"\n\necho \"\"\necho \"✅ MagSafe Guard is now running in your menu bar!\"\necho \"\"\necho \"\U0001F4A1 Tips:\"\necho \"   - Look for 'MG' text or shield icon in the menu bar\"\necho \"   - Click the icon to see the menu\"\necho \"   - Select 'Arm' to enable protection\"\necho \"   - Select 'Show Demo...' to test power monitoring\"\necho \"\"\necho \"To stop the app: Click the menu bar icon and select 'Quit MagSafe Guard'\"\n"
  run:debug:
    desc: Build and run MagSafe Guard in debug mode
    cmds:
      - "echo \"\U0001F528 Building MagSafe Guard (debug mode)...\"\n\n# Build in debug mode\nswift build\n\n# Find the built executable\nEXECUTABLE_PATH=\".build/debug/MagSafeGuard\"\n\nif [ ! -f \"$EXECUTABLE_PATH\" ]; then\n  echo \"❌ Build failed or executable not found\"\n  exit 1\nfi\n\necho \"✅ Build complete\"\n\n# Create a minimal app bundle structure\nAPP_NAME=\"MagSafeGuard-Debug.app\"\nAPP_PATH=\"/tmp/$APP_NAME\"\nCONTENTS_PATH=\"$APP_PATH/Contents\"\nMACOS_PATH=\"$CONTENTS_PATH/MacOS\"\n\necho \"\U0001F4E6 Creating debug app bundle...\"\n\n# Remove old app if exists\nrm -rf \"$APP_PATH\"\n\n# Create directory structure\nmkdir -p \"$MACOS_PATH\"\n\n# Copy executable\ncp \"$EXECUTABLE_PATH\" \"$MACOS_PATH/MagSafeGuard\"\n\n# Create Info.plist\ncat > \"$CONTENTS_PATH/Info.plist\" <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>CFBundleExecutable</key>\n    <string>MagSafeGuard</string>\n    <key>CFBundleIdentifier</key>\n    <string>com.lekman.MagSafeGuard.debug</string>\n    <key>CFBundleName</key>\n    <string>MagSafe Guard (Debug)</string>\n    <key>CFBundleShortVersionString</key>\n    <string>1.0</string>\n    <key>CFBundleVersion</key>\n    <string>1</string>\n    <key>LSMinimumSystemVersion</key>\n    <string>13.0</string>\n    <key>LSUIElement</key>\n    <true/>\n    <key>NSHighResolutionCapable</key>\n    <true/>\n</dict>\n</plist>\nEOF\n\necho \"✅ Debug app bundle created\"\necho \"\U0001F680 Launching MagSafe Guard (Debug)...\"\n\n# Launch the app\nopen \"$APP_PATH\"\n\necho \"\"\necho \"✅ Running in debug mode - check console for debug output\"\n"
  dev:setup:
    desc: Complete development setup (hooks + tools)
    silent: true
    cmds:
      - task: init
      - "echo \"\"\necho \"\U0001F4E6 Setting up development tools...\"\n\n# Check if Homebrew is installed\nif command -v brew &> /dev/null; then\n  echo \"Checking and updating tools via Homebrew...\"\n  \n  # Install/Update Semgrep\n  if ! command -v semgrep &> /dev/null; then\n    echo \"\U0001F4E6 Installing Semgrep...\"\n    brew install semgrep\n  else\n    echo \"✅ Semgrep already installed\"\n    if brew outdated | grep -q \"^semgrep\"; then\n      echo \"\U0001F4E6 Updating Semgrep...\"\n      brew upgrade semgrep\n    fi\n  fi\n  \n  # Install/Update SwiftLint (required)\n  if ! command -v swiftlint &> /dev/null; then\n    echo \"\U0001F4E6 Installing SwiftLint...\"\n    brew install swiftlint\n  else\n    echo \"✅ SwiftLint already installed ($(swiftlint version))\"\n    if brew outdated | grep -q \"^swiftlint\"; then\n      echo \"\U0001F4E6 Updating SwiftLint...\"\n      brew upgrade swiftlint\n    fi\n  fi\n  \n  # Install/Update markdownlint\n  if ! command -v markdownlint &> /dev/null; then\n    echo \"\U0001F4E6 Installing markdownlint...\"\n    brew install markdownlint-cli\n  else\n    echo \"✅ markdownlint already installed\"\n    if brew outdated | grep -q \"^markdownlint-cli\"; then\n      echo \"\U0001F4E6 Updating markdownlint...\"\n      brew upgrade markdownlint-cli\n    fi\n  fi\n  \n  echo \"✅ Development tools setup complete\"\nelse\n  echo \"⚠️  Homebrew not found. Install tools manually:\"\n  echo \"   - Semgrep: https://semgrep.dev/docs/getting-started/\"\n  echo \"   - SwiftLint: https://github.com/realm/SwiftLint\"\n  echo \"   - markdownlint: npm install -g markdownlint-cli\"\nfi\n"
  qa:
    desc: Run standard quality assurance checks
    silent: true
    cmds:
      - "echo \"\U0001F52C Running standard QA suite...\""
      - task: qa:fix
      - task: swift:test:coverage
      - task: swift:lint
      - task: yaml:lint
      - task: markdown:lint
      - task: security:scan
      - task: swift:sbom
      - task: docs:update
      - echo "✅ Standard QA suite passed!"
  qa:quick:
    desc: Quick QA checks for git hooks
    silent: true
    cmds:
      - echo "⚡ Running quick QA checks..."
      - task: swift:lint
      - task: yaml:validate
      - task: markdown:lint
      - task: security:secrets
      - echo "✅ Quick QA checks passed!"
  qa:fix:
    desc: Auto-fix all fixable issues
    silent: true
    cmds:
      - "echo \"\U0001F527 Auto-fixing issues...\""
      - task: swift:lint:fix
      - task: yaml:lint:fix
      - task: markdown:lint:fix
      - task: markdown:pr:fix
      - echo "✅ Auto-fix complete!"
  qa:full:
    desc: Full QA suite including SonarCloud analysis
    silent: true
    cmds:
      - "echo \"\U0001F680 Running full QA suite with SonarCloud...\""
      - task: qa
      - task: sonar:scan
      - echo "✅ Full QA suite with SonarCloud completed!"
  # Aliases for backward compatibility
  pre-push:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "⚠️  'pre-push' is deprecated. Use 'task qa' instead."
      - task: qa
  pre-pr:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "⚠️  'pre-pr' is deprecated. Use 'task qa' instead."
      - task: qa
  commit:
    desc: Interactive commit with conventional format
    silent: true
    cmds:
      - "echo \"\U0001F4DD Creating conventional commit...\"\necho \"\"\necho \"Select commit type:\"\necho \"  1) feat     - New feature\"\necho \"  2) fix      - Bug fix\"\necho \"  3) docs     - Documentation\"\necho \"  4) style    - Code style\"\necho \"  5) refactor - Code refactoring\"\necho \"  6) test     - Tests\"\necho \"  7) chore    - Maintenance\"\necho \"\"\nread -p \"Enter number (1-7): \" type_num\n\ncase $type_num in\n  1) type=\"feat\";;\n  2) type=\"fix\";;\n  3) type=\"docs\";;\n  4) type=\"style\";;\n  5) type=\"refactor\";;\n  6) type=\"test\";;\n  7) type=\"chore\";;\n  *) echo \"Invalid selection\"; exit 1;;\nesac\n\nread -p \"Enter scope (optional, press enter to skip): \" scope\nread -p \"Enter commit message: \" message\n\nif [ -n \"$scope\" ]; then\n  commit_msg=\"${type}(${scope}): ${message}\"\nelse\n  commit_msg=\"${type}: ${message}\"\nfi\n\necho \"\"\necho \"Commit message: $commit_msg\"\nread -p \"Proceed? (y/n): \" confirm\n\nif [ \"$confirm\" = \"y\" ]; then\n  git commit -m \"$commit_msg\"\nelse\n  echo \"Commit cancelled\"\nfi\n"
    interactive: true
  docs:update:
    desc: Update TaskMaster progress to main README
    silent: true
    cmds:
      - |
        task-master sync-readme >/dev/null 2>&1
  # Module shortcuts for easy discovery
  "swift:":
    desc: Show Swift development tasks
    silent: true
    cmds:
      - task: swift:default
  "security:":
    desc: Show security scanning tasks
    silent: true
    cmds:
      - task: security:default
  "sonar:":
    desc: Show SonarCloud analysis tasks
    silent: true
    cmds:
      - task: sonar:default
  "markdown:":
    desc: Show markdown linting tasks
    silent: true
    cmds:
      - task: markdown:default
  "yaml:":
    desc: Show YAML validation tasks
    silent: true
    cmds:
      - task: yaml:default
