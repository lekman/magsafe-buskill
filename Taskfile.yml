version: "3"
includes:
  sonar:
    taskfile: ./tasks/sonar.yml
    optional: false
  swift:
    taskfile: ./tasks/swift.yml
    optional: false
  security:
    taskfile: ./tasks/security.yml
    optional: false
  markdown:
    taskfile: ./tasks/markdown.yml
    optional: false
  yaml:
    taskfile: ./tasks/yaml.yml
    optional: false
  git:
    taskfile: ./tasks/git.yml
    optional: false
vars:
  HOOKS_PATH: .githooks
  SEMGREP_CONFIG: auto
tasks:
  default:
    desc: Show available tasks
    cmds:
      - |
        echo "üöÄ MagSafe Guard Development Tasks"
        echo "=================================="
        echo ""
        echo "üîß Core Commands:"
        echo "  task init          - Initialize development environment"
        echo "  task run           - Build and run MagSafe Guard (smart mode)"
        echo "  task run:help      - Show all run command options"
        echo "  task test          - Run all tests"
        echo "  task clean         - Clean build artifacts"
        echo ""
        echo "‚úÖ Quality Assurance:"
        echo "  task qa            - Run standard QA checks"
        echo "  task qa:quick      - Quick checks (for git hooks)"
        echo "  task qa:fix        - Auto-fix all fixable issues"
        echo "  task qa:full       - Full QA with SonarCloud"
        echo ""
        echo "üì¶ Module Commands:"
        echo "  task swift:        - Swift development tasks"
        echo "  task security:     - Security scanning tasks"
        echo "  task sonar:        - SonarCloud analysis"
        echo "  task markdown:     - Markdown linting"
        echo "  task yaml:         - YAML validation and linting"
        echo "  task git:          - Git and GitHub tasks"
        echo ""
        echo "üí° Tips:"
        echo "  ‚Ä¢ Use 'task <module>:' to see module-specific tasks"
        echo "  ‚Ä¢ Use 'task --list' to see all available tasks"
        echo "  ‚Ä¢ Most commands have a '--help' option"
        echo ""
    silent: true
  init:
    desc: Initialize development environment
    cmds:
      - task: check-tools
      - task: setup-hooks
      - task: setup
      - task: verify-setup
    silent: true
  setup:
    desc: Install all development tools and dependencies
    cmds:
      - task: swift:setup
      - task: security:setup
      - task: sonar:setup
      - task: markdown:setup
    silent: true
  check-tools:
    # Internal task - checks required development tools
    cmds:
      - |
        echo "üîç Checking development tools..."
        missing_tools=0

        # Check for git
        if ! command -v git &> /dev/null; then
          echo "‚ùå git is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "‚úÖ git $(git --version | awk '{print $3}')"
        fi

        # Check for Swift
        if ! command -v swift &> /dev/null; then
          echo "‚ùå Swift is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "‚úÖ Swift $(swift --version | head -1 | awk '{print $4}')"
        fi

        # Check for SwiftLint (required)
        if ! command -v swiftlint &> /dev/null; then
          echo "‚ùå SwiftLint is not installed"
          missing_tools=$((missing_tools + 1))
        else
          echo "‚úÖ SwiftLint $(swiftlint version)"
        fi

        # Check for Semgrep (optional)
        if ! command -v semgrep &> /dev/null; then
          echo "‚ö†Ô∏è  Semgrep not installed (optional but recommended)"
          echo "   Install with: brew install semgrep"
        else
          echo "‚úÖ Semgrep $(semgrep --version | head -1)"
        fi

        if [ $missing_tools -gt 0 ]; then
          exit 1
        fi
    silent: true
  setup-hooks:
    # Internal task - configures git hooks for development
    vars:
      CURRENT_HOOKS_PATH:
        sh: git config core.hooksPath || echo ""
    status:
      - test "{{.CURRENT_HOOKS_PATH}}" = "{{.HOOKS_PATH}}"
    cmds:
      - |
        echo "üîß Setting up MagSafe Guard development environment..."

        # Configure git to use our hooks directory
        git config core.hooksPath {{.HOOKS_PATH}}
        chmod +x {{.HOOKS_PATH}}/* 2>/dev/null || true

        echo "‚úÖ Git hooks configured"

        # Check if Semgrep is installed
        if command -v semgrep &> /dev/null; then
          echo "‚úÖ Semgrep is installed (version: $(semgrep --version | head -1))"
        else
          echo "‚ÑπÔ∏è  Semgrep not installed (optional but recommended)"
          echo "   To install: brew install semgrep"
          echo "   Pre-commit will still run basic security checks"
        fi

        echo ""
        echo "Git hooks will now:"
        echo "  ‚Ä¢ Check for hardcoded secrets in Swift files"
        echo "  ‚Ä¢ Detect private key files"
        echo "  ‚Ä¢ Prevent committing .env files"
        echo "  ‚Ä¢ Run Semgrep scan (if installed)"
        echo "  ‚Ä¢ Validate commit message format (Conventional Commits)"
        echo "  ‚Ä¢ Block certain words in commit messages"
        echo ""
        echo "To bypass hooks in emergencies: git commit --no-verify"
        echo "To skip Semgrep only: SKIP_SEMGREP=1 git commit"
    silent: true
  verify-setup:
    # Internal task - verifies development setup
    cmds:
      - |
        echo ""
        echo "üéâ Development environment ready!"
        echo ""
        echo "Git hooks installed:"
        hooks_path=$(git config core.hooksPath)
        if [ -n "$hooks_path" ]; then
          echo "  ‚Ä¢ Pre-commit: Security scanning"
          echo "  ‚Ä¢ Commit-msg: Conventional commits validation"
        fi
        echo ""
        echo "Next steps:"
        echo "  1. Make changes to the code"
        echo "  2. Commit with conventional format: git commit -m 'feat: description'"
        echo "  3. Run 'task test' before pushing"
    silent: true
  test:
    desc: Run all tests
    silent: true
    cmds:
      - task: security:secrets
      - task: swift:test
      - echo "‚úÖ All tests passed!"
  clean:
    desc: Clean build artifacts (alias for swift:clean)
    silent: true
    cmds:
      - task: swift:clean
  run:
    desc: Build and run MagSafe Guard with intelligent developer mode
    silent: true
    deps: [swift:setup-bundler]
    cmds:
      - |
        # Enhanced run command with automatic handling of permissions and signing
        echo "üöÄ MagSafe Guard Developer Run Command"
        echo "====================================="
        echo ""

        # Detect user type and environment
        IS_ADMIN=false
        if groups | grep -q admin; then
          IS_ADMIN=true
        fi

        HAS_SUDO=false
        if sudo -n true 2>/dev/null; then
          HAS_SUDO=true
        fi

        # Check for development certificates
        HAS_DEV_CERT=false
        if security find-identity -v -p codesigning | grep -q "Apple Development"; then
          HAS_DEV_CERT=true
        fi

        # Display environment info
        echo "üîç Environment Detection:"
        echo "  ‚Ä¢ User type: $([ "$IS_ADMIN" = true ] && echo "Admin" || echo "Standard") user"
        echo "  ‚Ä¢ Sudo access: $([ "$HAS_SUDO" = true ] && echo "Available" || echo "Not available")"
        echo "  ‚Ä¢ Dev certificate: $([ "$HAS_DEV_CERT" = true ] && echo "Found" || echo "Not found")"
        echo ""

        # Kill existing instances
        echo "üîÑ Managing existing instances..."
        if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
          echo "  ‚Ä¢ Terminating existing MagSafe Guard processes..."
          killall MagSafeGuard 2>/dev/null || true
          sleep 1
          
          # Force kill if needed
          if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
            killall -9 MagSafeGuard 2>/dev/null || true
            sleep 0.5
          fi
          echo "  ‚úÖ Previous instances terminated"
        else
          echo "  ‚úÖ No existing instances found"
        fi

        echo ""
        echo "üî® Building MagSafe Guard..."

        # Build with Swift Bundler
        BUNDLER="./swift-bundler"
        if [ ! -f "$BUNDLER" ]; then
          echo "‚ùå Swift Bundler not found. Setting up..."
          task swift:setup-bundler
        fi

        # Clean build directory for fresh start
        rm -rf ./.build/bundler/MagSafeGuard.app

        # Build universal binary
        if ! $BUNDLER bundle --configuration release --universal; then
          echo "‚ùå Build failed"
          echo ""
          echo "Troubleshooting:"
          echo "  1. Check for Swift syntax errors"
          echo "  2. Run: swift build -c release"
          echo "  3. Check Package.swift dependencies"
          exit 1
        fi

        APP_PATH="./.build/bundler/MagSafeGuard.app"
        APP_PATH_ABS="$(cd "$(dirname "$APP_PATH")" && pwd)/$(basename "$APP_PATH")"

        if [ ! -d "$APP_PATH" ]; then
          echo "‚ùå App bundle not found at $APP_PATH"
          exit 1
        fi

        echo "‚úÖ Build complete"
        echo ""

        # Smart signing strategy
        echo "üîê Code Signing Strategy..."
        SIGNING_SUCCESS=false

        if [ "$SKIP_CODESIGN" = "1" ]; then
          echo "  ‚ö†Ô∏è  Skipping code signing (SKIP_CODESIGN=1)"
        elif [ "$HAS_DEV_CERT" = true ]; then
          echo "  ‚Ä¢ Attempting development signing..."
          if ./scripts/sign-app.sh development "$APP_PATH" >/dev/null 2>&1; then
            echo "  ‚úÖ App signed with development certificate"
            SIGNING_SUCCESS=true
          else
            echo "  ‚ö†Ô∏è  Development signing failed"
          fi
        else
          echo "  ‚Ä¢ No development certificate found"
          echo "  ‚Ä¢ Using ad-hoc signing for local testing..."
          if codesign --force --deep --sign "-" "$APP_PATH" 2>/dev/null; then
            echo "  ‚úÖ Ad-hoc signing applied"
            SIGNING_SUCCESS=true
          else
            echo "  ‚ö†Ô∏è  Ad-hoc signing failed"
          fi
        fi

        # Clear quarantine and extended attributes
        echo ""
        echo "üßπ Preparing app for launch..."
        xattr -cr "$APP_PATH" 2>/dev/null || true

        # Smart launch strategy based on user type and signing
        echo ""
        echo "üöÄ Launching MagSafe Guard..."
        LAUNCH_SUCCESS=false

        # Strategy 1: Try normal launch first
        if open "$APP_PATH" 2>/dev/null; then
          LAUNCH_SUCCESS=true
          echo "‚úÖ App launched successfully via macOS Launch Services"
        else
          echo "‚ö†Ô∏è  Standard launch failed, trying alternative methods..."
          
          # Strategy 2: For admin users with sudo, try to bypass Gatekeeper
          if [ "$IS_ADMIN" = true ] && [ "$HAS_SUDO" = true ]; then
            echo "  ‚Ä¢ Attempting Gatekeeper bypass with sudo..."
            sudo spctl --add "$APP_PATH" 2>/dev/null || true
            sudo xattr -d com.apple.quarantine "$APP_PATH" 2>/dev/null || true
            
            if open "$APP_PATH" 2>/dev/null; then
              LAUNCH_SUCCESS=true
              echo "  ‚úÖ App launched after Gatekeeper bypass"
            fi
          fi
          
          # Strategy 3: Direct execution fallback
          if [ "$LAUNCH_SUCCESS" = false ]; then
            echo "  ‚Ä¢ Attempting direct execution..."
            
            # Run directly in background
            "$APP_PATH/Contents/MacOS/MagSafeGuard" &
            APP_PID=$!
            
            # Wait for startup
            sleep 2
            
            if kill -0 $APP_PID 2>/dev/null || pgrep -x "MagSafeGuard" > /dev/null; then
              LAUNCH_SUCCESS=true
              echo "  ‚úÖ App running in direct execution mode (PID: $APP_PID)"
              echo ""
              echo "  ‚ÑπÔ∏è  Direct execution mode notes:"
              echo "     - App runs without full macOS integration"
              echo "     - Some features may be limited"
              echo "     - This is normal for development"
            else
              echo "  ‚ùå Direct execution failed"
            fi
          fi
        fi

        # If launch failed, provide detailed help
        if [ "$LAUNCH_SUCCESS" = false ]; then
          echo ""
          echo "‚ùå Unable to launch MagSafe Guard"
          echo ""
          echo "üìã Diagnostic Information:"
          echo "   - User type: $([ "$IS_ADMIN" = true ] && echo "Admin" || echo "Standard")"
          echo "   - Signing: $([ "$SIGNING_SUCCESS" = true ] && echo "Success" || echo "Failed")"
          echo "   - Gatekeeper: $(spctl -a "$APP_PATH" 2>&1 | head -1)"
          echo ""
          
          if [ "$IS_ADMIN" = false ]; then
            echo "üîß For Standard Users:"
            echo ""
            echo "Option 1 - Get admin help (replace 'admin' with your admin username if different):"
            echo "  su - admin -c 'chmod -R 755 \"$APP_PATH_ABS\" && xattr -cr \"$APP_PATH_ABS\"'"
            echo ""
            echo "Option 2 - Run with sudo (requires your password):"
            echo "  sudo xattr -cr \"$APP_PATH_ABS\""
            echo ""
            echo "Option 3 - Use direct mode:"
            echo "  task run:direct"
            echo ""
            echo "Option 4 - Use unsigned mode:"
            echo "  task run:unsigned"
          else
            echo "üîß For Admin Users:"
            echo ""
            echo "Try these commands:"
            echo "  1. xattr -cr '$APP_PATH'"
            echo "  2. spctl --add '$APP_PATH'"
            echo "  3. codesign --force --deep --sign - '$APP_PATH'"
            echo ""
            echo "Or check Console.app for crash logs"
          fi
          exit 1
        fi

        # Verify app is running and stable
        echo ""
        echo "üîç Verifying app stability..."

        # Monitor for 3 seconds
        for i in 1 2 3; do
          sleep 1
          if ! pgrep -x "MagSafeGuard" > /dev/null; then
            echo "‚ùå App crashed after $i seconds!"
            echo ""
            echo "Check crash logs:"
            echo "  ‚Ä¢ Console.app ‚Üí Crash Reports"
            echo "  ‚Ä¢ ~/Library/Logs/DiagnosticReports/"
            exit 1
          fi
        done

        echo "‚úÖ App is stable and running!"
        echo ""
        echo "üéâ MagSafe Guard is now running in your menu bar!"
        echo ""
        echo "üí° Quick Guide:"
        echo "   ‚Ä¢ Look for 'MG' text or shield icon in menu bar"
        echo "   ‚Ä¢ Click icon to access menu"
        echo "   ‚Ä¢ Select 'Arm' to enable protection"
        echo "   ‚Ä¢ To stop: Click icon ‚Üí 'Quit MagSafe Guard'"
        echo ""
        echo "üîß Developer Tips:"
        echo "   ‚Ä¢ Run 'task run' again to rebuild and restart"
        echo "   ‚Ä¢ Use 'task run:debug' for debug builds"
        echo "   ‚Ä¢ Attach Xcode debugger: Debug ‚Üí Attach to Process ‚Üí MagSafeGuard"
        echo "   ‚Ä¢ View logs: log stream --predicate 'process == \"MagSafeGuard\"'"

  run:sign:
    desc: Build, sign, and run with full code signing (production-like)
    silent: true
    deps: [swift:setup-bundler]
    cmds:
      - |
        echo "üîê Signed Production Run"
        echo "========================"
        echo ""
        echo "This mode uses full code signing for production-like testing"
        echo ""

        # Check for certificates
        echo "üîç Checking available certificates..."
        if security find-identity -v -p codesigning | grep -q "Developer ID"; then
          echo "‚úÖ Found Developer ID certificate"
          CONFIG="release"
        elif security find-identity -v -p codesigning | grep -q "Apple Development"; then
          echo "‚úÖ Found Apple Development certificate"
          CONFIG="development"
        else
          echo "‚ùå No signing certificates found"
          echo ""
          echo "To create a certificate:"
          echo "  1. Open Xcode ‚Üí Settings ‚Üí Accounts"
          echo "  2. Select your Apple ID"
          echo "  3. Click 'Manage Certificates'"
          echo "  4. Click '+' ‚Üí 'Apple Development'"
          exit 1
        fi

        # Kill existing instances
        if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
          echo "üîÑ Stopping existing instances..."
          killall MagSafeGuard 2>/dev/null || true
          sleep 1
        fi

        # Build and sign
        echo ""
        echo "üî® Building with Swift Bundler..."
        ./swift-bundler bundle --configuration release --universal

        APP_PATH="./.build/bundler/MagSafeGuard.app"

        echo ""
        echo "üîê Signing with $CONFIG configuration..."
        ./scripts/sign-app.sh "$CONFIG" "$APP_PATH"

        echo ""
        echo "üöÄ Launching signed app..."
        open "$APP_PATH"

        sleep 2

        if pgrep -x "MagSafeGuard" > /dev/null; then
          echo ""
          echo "‚úÖ Signed app running successfully!"
          echo ""
          echo "This version is properly signed and notarization-ready."
        else
          echo "‚ùå Failed to launch signed app"
          exit 1
        fi

  run:watch:
    desc: Watch for changes and auto-rebuild/restart (requires fswatch)
    silent: true
    cmds:
      - |
        echo "üëÄ Watch Mode"
        echo "============="
        echo ""

        # Check for fswatch
        if ! command -v fswatch &> /dev/null; then
          echo "‚ùå fswatch not installed"
          echo ""
          echo "Install with: brew install fswatch"
          exit 1
        fi

        echo "Watching for changes in:"
        echo "  ‚Ä¢ Sources/"
        echo "  ‚Ä¢ Package.swift"
        echo "  ‚Ä¢ Resources/"
        echo ""
        echo "Press Ctrl+C to stop"
        echo ""

        # Initial run
        task run:direct

        # Watch for changes
        fswatch -o Sources Package.swift Resources | while read num ; do
          echo ""
          echo "üìù Changes detected, rebuilding..."
          task run:direct
        done

  run:help:
    desc: Show detailed help for all run commands
    silent: true
    cmds:
      - |
        echo "üöÄ MagSafe Guard Run Commands"
        echo "============================="
        echo ""
        echo "Choose the best command for your situation:"
        echo ""
        echo "üìã Main Commands:"
        echo ""
        echo "  task run"
        echo "    ‚Ä¢ Smart detection of environment"
        echo "    ‚Ä¢ Automatic signing if certificates available"
        echo "    ‚Ä¢ Best for most development scenarios"
        echo "    ‚Ä¢ Works for both admin and standard users"
        echo ""
        echo "  task run:direct"
        echo "    ‚Ä¢ Runs raw executable (no app bundle)"
        echo "    ‚Ä¢ Bypasses all macOS security"
        echo "    ‚Ä¢ Fastest startup time"
        echo "    ‚Ä¢ Best for standard users without admin"
        echo ""
        echo "  task run:unsigned"
        echo "    ‚Ä¢ Creates app bundle but skips signing"
        echo "    ‚Ä¢ Faster than signed builds"
        echo "    ‚Ä¢ May require security bypass"
        echo ""
        echo "  task run:debug"
        echo "    ‚Ä¢ Debug build with symbols"
        echo "    ‚Ä¢ Enables verbose logging"
        echo "    ‚Ä¢ Allows Xcode attachment"
        echo "    ‚Ä¢ Best for debugging issues"
        echo ""
        echo "  task run:sign"
        echo "    ‚Ä¢ Full code signing"
        echo "    ‚Ä¢ Production-like environment"
        echo "    ‚Ä¢ Tests signing workflow"
        echo "    ‚Ä¢ Requires certificates"
        echo ""
        echo "  task run:watch"
        echo "    ‚Ä¢ Auto-rebuild on file changes"
        echo "    ‚Ä¢ Great for rapid iteration"
        echo "    ‚Ä¢ Requires fswatch installed"
        echo ""
        echo "üîß Troubleshooting:"
        echo ""
        echo "  Standard user? ‚Üí Use 'task run:direct'"
        echo "  Gatekeeper issues? ‚Üí Use 'task run:direct' or get admin help"
        echo "  Need debugging? ‚Üí Use 'task run:debug'"
        echo "  Testing signing? ‚Üí Use 'task run:sign'"
        echo "  Rapid development? ‚Üí Use 'task run:watch'"
        echo ""
        echo "üí° Pro Tips:"
        echo "  ‚Ä¢ 'task run' adapts to your environment automatically"
        echo "  ‚Ä¢ Use 'task run:direct' for fastest iteration"
        echo "  ‚Ä¢ Debug with: log stream --predicate 'process == \"MagSafeGuard\"'"
        echo "  ‚Ä¢ Kill app with: killall MagSafeGuard"

  run:unsigned:
    desc: Build and run MagSafe Guard without code signing (fastest iteration)
    silent: true
    cmds:
      - |
        echo "üöÄ Running MagSafe Guard (Unsigned Mode)"
        echo "======================================="
        echo ""
        echo "‚ÑπÔ∏è  This mode skips all code signing for fastest iteration"
        echo ""

        # Set environment variable and run
        export SKIP_CODESIGN=1
        task run

  run:direct:
    desc: Run MagSafe Guard executable directly (bypasses all macOS security)
    silent: true
    cmds:
      - |
        echo "üöÄ Direct Execution Mode"
        echo "======================="
        echo ""
        echo "This mode runs the raw executable, bypassing:"
        echo "  ‚Ä¢ App bundles"
        echo "  ‚Ä¢ Code signing"
        echo "  ‚Ä¢ Gatekeeper"
        echo "  ‚Ä¢ Launch Services"
        echo ""

        # Check for existing build
        EXECUTABLE=".build/release/MagSafeGuard"
        BUILD_AGE=999999

        if [ -f "$EXECUTABLE" ]; then
          # Check if build is recent (within last 5 minutes)
          if [ "$(uname)" = "Darwin" ]; then
            BUILD_TIME=$(stat -f %m "$EXECUTABLE")
            CURRENT_TIME=$(date +%s)
            BUILD_AGE=$((CURRENT_TIME - BUILD_TIME))
          fi
        fi

        # Rebuild if executable is missing or older than 5 minutes
        if [ ! -f "$EXECUTABLE" ] || [ $BUILD_AGE -gt 300 ]; then
          echo "üî® Building MagSafe Guard..."
          swift build -c release --product MagSafeGuard
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Build failed"
            exit 1
          fi
        else
          echo "‚úÖ Using existing build ($(( BUILD_AGE / 60 )) minutes old)"
        fi

        if [ ! -f "$EXECUTABLE" ]; then
          echo "‚ùå Executable not found at $EXECUTABLE"
          exit 1
        fi

        echo ""

        # Kill existing instances
        if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
          echo "üîÑ Stopping existing instances..."
          killall MagSafeGuard 2>/dev/null || true
          sleep 1
          
          # Force kill if needed
          if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
            killall -9 MagSafeGuard 2>/dev/null || true
          fi
        fi

        echo "üöÄ Starting MagSafe Guard (direct mode)..."
        echo ""

        # Clear any extended attributes on the executable
        xattr -cr "$EXECUTABLE" 2>/dev/null || true

        # Run directly with output capture
        "$EXECUTABLE" 2>&1 | tee /tmp/magsafe-guard.log &
        APP_PID=$!

        # Monitor startup
        echo "Waiting for app to initialize..."
        sleep 3

        # Check if running
        if kill -0 $APP_PID 2>/dev/null || pgrep -x "MagSafeGuard" > /dev/null; then
          echo ""
          echo "‚úÖ MagSafe Guard is running!"
          echo ""
          echo "üìã Runtime Information:"
          echo "   ‚Ä¢ Process ID: $APP_PID"
          echo "   ‚Ä¢ Log file: /tmp/magsafe-guard.log"
          echo "   ‚Ä¢ Executable: $EXECUTABLE"
          echo ""
          echo "üí° Direct Mode Features:"
          echo "   ‚úÖ Full functionality"
          echo "   ‚úÖ No signing required"
          echo "   ‚úÖ Works for all users"
          echo "   ‚ùå No app bundle (no Finder icon)"
          echo "   ‚ùå No automatic CloudKit setup"
          echo ""
          echo "üõë To stop: killall MagSafeGuard"
          echo "üìä View logs: tail -f /tmp/magsafe-guard.log"
        else
          echo ""
          echo "‚ùå App failed to start!"
          echo ""
          echo "Last 20 lines of output:"
          tail -20 /tmp/magsafe-guard.log 2>/dev/null || echo "No log output found"
          echo ""
          echo "Try running manually to see full error:"
          echo "  $EXECUTABLE"
          exit 1
        fi

  build:
    desc: Build MagSafe Guard app bundle using Swift Bundler
    silent: true
    deps: [swift:setup-bundler]
    cmds:
      - |
        echo "üî® Building MagSafe Guard app bundle..."

        # Ensure Swift Bundler is available
        BUNDLER="./swift-bundler"
        if [ ! -f "$BUNDLER" ]; then
          echo "Setting up Swift Bundler..."
          task swift:setup-bundler
        fi

        # Clean previous build
        rm -rf ./.build/bundler/MagSafeGuard.app

        # Build with Swift Bundler
        echo "Building universal binary..."
        if $BUNDLER bundle --configuration release --universal; then
          echo "‚úÖ Build complete!"
          echo ""
          echo "App bundle: ./.build/bundler/MagSafeGuard.app"
          echo ""
          echo "Next steps:"
          echo "  ‚Ä¢ Run the app: task run"
          echo "  ‚Ä¢ Sign the app: task swift:sign"
          echo "  ‚Ä¢ Create installer: task swift:package"
        else
          echo "‚ùå Build failed"
          exit 1
        fi

  run:debug:
    desc: Build and run MagSafe Guard in debug mode with enhanced debugging
    silent: true
    deps: [swift:setup-bundler]
    cmds:
      - |
        echo "üêõ Debug Mode Run"
        echo "================="
        echo ""
        echo "This mode enables:"
        echo "  ‚Ä¢ Debug symbols"
        echo "  ‚Ä¢ Verbose logging"
        echo "  ‚Ä¢ Assertion checks"
        echo "  ‚Ä¢ Xcode attachment"
        echo ""

        # Kill existing instances
        if pgrep -x "MagSafeGuard" > /dev/null 2>&1; then
          echo "üîÑ Stopping existing instances..."
          killall MagSafeGuard 2>/dev/null || true
          sleep 1
        fi

        echo "üî® Building debug version..."

        # Clean debug build directory
        rm -rf ./.build/bundler/MagSafeGuard.app

        # Build with Swift Bundler in debug mode
        BUNDLER="./swift-bundler"
        if [ ! -f "$BUNDLER" ]; then
          echo "Setting up Swift Bundler..."
          task swift:setup-bundler
        fi

        # Build debug version
        if ! $BUNDLER bundle --configuration debug --universal; then
          echo "‚ùå Debug build failed"
          exit 1
        fi

        APP_PATH="./.build/bundler/MagSafeGuard.app"

        if [ ! -d "$APP_PATH" ]; then
          echo "‚ùå Debug app bundle not found"
          exit 1
        fi

        echo "‚úÖ Debug build complete"
        echo ""

        # Apply ad-hoc signing for debug
        echo "üîê Applying debug signing..."
        codesign --force --deep --sign "-" "$APP_PATH" 2>/dev/null || true
        xattr -cr "$APP_PATH" 2>/dev/null || true

        # Enable debug logging
        export MAGSAFE_GUARD_DEBUG=1
        export MAGSAFE_GUARD_LOG_LEVEL=debug

        echo "üöÄ Launching in debug mode..."

        # Try normal launch first
        if ! open "$APP_PATH" 2>/dev/null; then
          echo "‚ö†Ô∏è  Normal launch failed, using direct execution..."
          "$APP_PATH/Contents/MacOS/MagSafeGuard" &
          APP_PID=$!
        fi

        sleep 2

        # Verify it's running
        if pgrep -x "MagSafeGuard" > /dev/null; then
          echo "‚úÖ Debug version running!"
          echo ""
          echo "üêõ Debugging Options:"
          echo ""
          echo "1. Attach with Xcode:"
          echo "   ‚Ä¢ Open Xcode"
          echo "   ‚Ä¢ Debug ‚Üí Attach to Process ‚Üí MagSafeGuard"
          echo ""
          echo "2. View live logs:"
          echo "   log stream --predicate 'process == \"MagSafeGuard\"' --level debug"
          echo ""
          echo "3. View Console.app:"
          echo "   ‚Ä¢ Open Console.app"
          echo "   ‚Ä¢ Filter by 'MagSafeGuard'"
          echo ""
          echo "4. Debug with lldb:"
          echo "   lldb -n MagSafeGuard"
          echo ""
          echo "üí° Debug build includes:"
          echo "   ‚Ä¢ Symbol information for stack traces"
          echo "   ‚Ä¢ Assertion failures will crash (good for finding bugs)"
          echo "   ‚Ä¢ Verbose logging enabled"
          echo "   ‚Ä¢ Optimization disabled for better debugging"
        else
          echo "‚ùå Debug launch failed!"
          exit 1
        fi

  qa:
    desc: Run standard quality assurance checks
    silent: true
    cmds:
      - echo "üî¨ Running standard QA suite..."
      - task: qa:fix
      - task: swift:test:coverage
      - task: swift:lint
      - task: yaml:lint
      - task: markdown:lint
      - task: security:scan
      - task: swift:sbom
      - task: docs:update
      - echo "‚úÖ Standard QA suite passed!"
  qa:quick:
    desc: Quick QA checks for git hooks
    silent: true
    cmds:
      - echo "‚ö° Running quick QA checks..."
      - task: swift:lint
      - task: yaml:validate
      - task: markdown:lint
      - task: security:secrets
      - echo "‚úÖ Quick QA checks passed!"
  qa:fix:
    desc: Auto-fix all fixable issues
    silent: true
    cmds:
      - echo "üîß Auto-fixing issues..."
      - task: swift:lint:fix
      - task: yaml:lint:fix
      - task: markdown:lint:fix
      - task: markdown:pr:fix
      - echo "‚úÖ Auto-fix complete!"
  qa:full:
    desc: Full QA suite including SonarCloud analysis
    silent: true
    cmds:
      - echo "üöÄ Running full QA suite with SonarCloud..."
      - task: qa
      - task: sonar:scan
      - echo "‚úÖ Full QA suite with SonarCloud completed!"
  # Aliases for backward compatibility
  pre-push:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "‚ö†Ô∏è  'pre-push' is deprecated. Use 'task qa' instead."
      - task: qa
  pre-pr:
    desc: "(Deprecated) Use 'task qa' instead"
    silent: true
    cmds:
      - echo "‚ö†Ô∏è  'pre-pr' is deprecated. Use 'task qa' instead."
      - task: qa
  commit:
    desc: Interactive commit with conventional format
    silent: true
    cmds:
      - |
        echo "üìù Creating conventional commit..."
        echo ""
        echo "Select commit type:"
        echo "  1) feat     - New feature"
        echo "  2) fix      - Bug fix"
        echo "  3) docs     - Documentation"
        echo "  4) style    - Code style"
        echo "  5) refactor - Code refactoring"
        echo "  6) test     - Tests"
        echo "  7) chore    - Maintenance"
        echo ""
        read -p "Enter number (1-7): " type_num

        case $type_num in
          1) type="feat";;
          2) type="fix";;
          3) type="docs";;
          4) type="style";;
          5) type="refactor";;
          6) type="test";;
          7) type="chore";;
          *) echo "Invalid selection"; exit 1;;
        esac

        read -p "Enter scope (optional, press enter to skip): " scope
        read -p "Enter commit message: " message

        if [ -n "$scope" ]; then
          commit_msg="${type}(${scope}): ${message}"
        else
          commit_msg="${type}: ${message}"
        fi

        echo ""
        echo "Commit message: $commit_msg"
        read -p "Proceed? (y/n): " confirm

        if [ "$confirm" = "y" ]; then
          git commit -m "$commit_msg"
        else
          echo "Commit cancelled"
        fi
    interactive: true
  docs:update:
    desc: Update TaskMaster progress to main README
    silent: true
    cmds:
      - |
        task-master sync-readme >/dev/null 2>&1
  # Module shortcuts for easy discovery
  "swift:":
    desc: Show Swift development tasks
    silent: true
    cmds:
      - task: swift:default
  "security:":
    desc: Show security scanning tasks
    silent: true
    cmds:
      - task: security:default
  "sonar:":
    desc: Show SonarCloud analysis tasks
    silent: true
    cmds:
      - task: sonar:default
  "markdown:":
    desc: Show markdown linting tasks
    silent: true
    cmds:
      - task: markdown:default
  "yaml:":
    desc: Show YAML validation tasks
    silent: true
    cmds:
      - task: yaml:default
  "git:":
    desc: Show Git and GitHub tasks
    silent: true
    cmds:
      - task: git:default
