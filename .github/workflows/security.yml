name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # CodeQL Analysis for code scanning
  codeql:
    name: CodeQL Analysis
    runs-on: macos-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        language: ['swift']
        # Add more languages as needed: ['swift', 'javascript', 'python']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Optionally specify custom queries
        queries: security-extended,security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        # Fail on high severity vulnerabilities
        fail-on-severity: high
        # Check for license issues
        license-check: true
        # Allowed licenses (customize based on your needs)
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC, MPL-2.0, AGPL-3.0

  # Secret scanning with TruffleHog
  trufflehog:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for scanning
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # Security Policy Check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for security policy
      run: |
        if [ ! -f "docs/SECURITY.md" ] && [ ! -f ".github/SECURITY.md" ] && [ ! -f "SECURITY.md" ]; then
          echo "::warning::No SECURITY.md file found. Consider adding a security policy."
          echo "Creating a basic SECURITY.md file..."
          exit 1
        fi

  # SAST with Semgrep
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/swift
        generateSarif: true
        
    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  # License scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run License Scan
      uses: fossas/fossa-action@main
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
      continue-on-error: true  # Don't fail if FOSSA is not configured

  # Security Scorecard
  scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        
    - name: Run Scorecard
      uses: ossf/scorecard-action@v2
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true
        
    - name: Upload results to code scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  # Container scanning (if Dockerfiles exist)
  trivy:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for Dockerfile
      id: dockerfile
      run: |
        if [ -f "Dockerfile" ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Run Trivy vulnerability scanner
      if: steps.dockerfile.outputs.dockerfile_exists == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy results
      if: steps.dockerfile.outputs.dockerfile_exists == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Summary job
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-review, trufflehog, semgrep, scorecard]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [ "${{ needs.codeql.result }}" == "success" ]; then
          echo "✅ CodeQL Analysis: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ CodeQL Analysis: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dependency-review.result }}" == "success" ] || [ "${{ needs.dependency-review.result }}" == "skipped" ]; then
          echo "✅ Dependency Review: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Dependency Review: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.trufflehog.result }}" == "success" ]; then
          echo "✅ Secret Scanning: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Secret Scanning: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.semgrep.result }}" == "success" ]; then
          echo "✅ SAST (Semgrep): Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ SAST (Semgrep): Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed results in the Security tab." >> $GITHUB_STEP_SUMMARY