name: Security Scanning
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
permissions:
  contents: read
  actions: read
jobs:
  # Check if this is a release-please branch
  check-skip:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should-skip: ${{ steps.check.outputs.should-skip }}
    steps:
      - name: Check if release-please branch
        id: check
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF: ${{ github.ref }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Event: $EVENT_NAME"
          echo "Ref: $REF"
          echo "Head ref: $HEAD_REF"
          echo "Base ref: $BASE_REF"

          # For pull requests, check the head branch name
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            if [[ "$HEAD_REF" == release-please--* ]]; then
              echo "should-skip=true" >> $GITHUB_OUTPUT
              echo "Skipping security checks for release-please PR from branch: $HEAD_REF"
            else
              echo "should-skip=false" >> $GITHUB_OUTPUT
            fi
          # For pushes, check the ref name
          elif [[ "$REF_NAME" == release-please--* ]]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "Skipping security checks for release-please branch: $REF_NAME"
          else
            echo "should-skip=false" >> $GITHUB_OUTPUT
          fi
  cancel-redundant:
    name: Cancel Redundant Workflows
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Cancel redundant workflow runs
        uses: ./.github/actions/cancel-redundant-workflows
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  # Basic security checks
  basic-checks:
    name: Basic Security Checks
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Check for secrets in code
        run: "echo \"\U0001F50D Checking for potential secrets in source code...\"\n\n# Initialize counter\nfound_issues=0\n\n# Check Swift files for hardcoded secrets\necho \"Checking Swift files...\"\nswift_files=$(find . -name \"*.swift\" -type f 2>/dev/null || true)\n\nif [ -n \"$swift_files\" ]; then\n  for file in $swift_files; do\n    # Check for obvious secret patterns\n    if grep -q -i -E 'password\\s*=\\s*\"[^\"]+\"' \"$file\" 2>/dev/null; then\n      echo \"⚠️  Potential hardcoded password in: $file\"\n      found_issues=$((found_issues + 1))\n    fi\n    if grep -q -i -E 'api_?key\\s*=\\s*\"[^\"]+\"' \"$file\" 2>/dev/null; then\n      echo \"⚠️  Potential hardcoded API key in: $file\"\n      found_issues=$((found_issues + 1))\n    fi\n    if grep -q -i -E 'secret\\s*=\\s*\"[^\"]+\"' \"$file\" 2>/dev/null; then\n      echo \"⚠️  Potential hardcoded secret in: $file\"\n      found_issues=$((found_issues + 1))\n    fi\n  done\nfi\n\n# Check for private key files\necho \"\"\necho \"Checking for private key files...\"\nkey_files=$(find . -type f \\( -name \"*.pem\" -o -name \"*.key\" -o -name \"*.p12\" -o -name \"id_rsa*\" \\) -not -path \"./.git/*\" 2>/dev/null || true)\nif [ -n \"$key_files\" ]; then\n  echo \"⚠️  Found private key files:\"\n  echo \"$key_files\"\n  found_issues=$((found_issues + 1))\nfi\n\n# Check for .env files\necho \"\"\necho \"Checking for .env files...\"\nenv_files=$(find . -name \".env*\" -type f -not -name \".env.example\" -not -path \"./.git/*\" 2>/dev/null || true)\nif [ -n \"$env_files\" ]; then\n  echo \"⚠️  Found .env files that might contain secrets:\"\n  echo \"$env_files\"\n  found_issues=$((found_issues + 1))\nfi\n\n# Summary\necho \"\"\nif [ $found_issues -gt 0 ]; then\n  echo \"❌ Found $found_issues potential security issues.\"\n  echo \"\"\n  echo \"If these are false positives:\"\n  echo \"- Example passwords in documentation are okay\"\n  echo \"- GitHub Actions secrets (\\${{ secrets.XXX }}) are safe\"\n  echo \"- .env.example files are acceptable\"\n  exit 1\nelse\n  echo \"✅ No obvious secrets found in source code.\"\nfi\n"
      - name: Check file permissions
        run: "echo \"\"\necho \"\U0001F50D Checking for overly permissive files...\"\n\n# Find files with world-writable permissions\npermissive_files=$(find . -type f -perm -o+w -not -path \"./.git/*\" 2>/dev/null || true)\n\nif [ -n \"$permissive_files\" ]; then\n  echo \"⚠️  Warning: Found world-writable files:\"\n  echo \"$permissive_files\"\n  echo \"\"\n  echo \"Fix with: chmod o-w <filename>\"\nelse\n  echo \"✅ No overly permissive files found.\"\nfi\n"
      - name: Security TODOs check
        run: "echo \"\"\necho \"\U0001F50D Checking for security-related TODOs...\"\n\nsecurity_todos=$(grep -r -i -E \"TODO.*security|FIXME.*security|XXX.*security|HACK.*security\" . \\\n  --exclude-dir=.git \\\n  --exclude-dir=node_modules \\\n  --exclude=\"*.md\" 2>/dev/null || true)\n\nif [ -n \"$security_todos\" ]; then\n  echo \"\U0001F4DD Found security-related TODOs (review these):\"\n  echo \"$security_todos\" | head -10\n  echo \"\"\n  echo \"Note: Security TODOs should be tracked in issues, not code.\"\nelse\n  echo \"✅ No security TODOs found.\"\nfi\n"
  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: github.event_name == 'pull_request' && needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Dependency Review
        uses: actions/dependency-review-action@da24556b548a50705dd671f47852072ea4c105d9 # v4.7.1
        with:
          # Fail on high severity vulnerabilities
          fail-on-severity: high
          # Check for license issues
          license-check: true
          # Allowed licenses (customize based on your needs)
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC, MPL-2.0, AGPL-3.0, LGPL-3.0
  # Secret scanning with TruffleHog
  trufflehog:
    name: Secret Scanning
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Fetch all history for scanning
      - name: TruffleHog OSS
        id: trufflehog
        uses: trufflesecurity/trufflehog@a05cf0859455b5b16317ee22d809887a4043cdf0 # v3.90.2
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true
      - name: Check TruffleHog Results
        env:
          TRUFFLEHOG_OUTCOME: ${{ steps.trufflehog.outcome }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: "if [[ \"$TRUFFLEHOG_OUTCOME\" == \"failure\" ]]; then\n  echo \"TruffleHog scan failed. Checking if it's due to BASE==HEAD...\"\n  \n  # Get the default branch commit\n  BASE_COMMIT=$(git rev-parse \"origin/${DEFAULT_BRANCH}\" 2>/dev/null || echo \"\")\n  HEAD_COMMIT=$(git rev-parse HEAD)\n  \n  if [[ \"$BASE_COMMIT\" == \"$HEAD_COMMIT\" ]]; then\n    echo \"✅ BASE and HEAD commits are the same. This is expected for direct pushes to ${DEFAULT_BRANCH}.\"\n    echo \"No incremental scan needed - all secrets would have been caught in previous scans.\"\n  else\n    echo \"❌ TruffleHog failed for another reason. Please check the logs above.\"\n    exit 1\n  fi\nelse\n  echo \"✅ TruffleHog scan completed successfully\"\nfi\n"
  # Security Policy Check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Check for security policy
        run: |
          if [ ! -f "docs/SECURITY.md" ] && [ ! -f ".github/SECURITY.md" ] && [ ! -f "SECURITY.md" ]; then
            echo "::warning::No SECURITY.md file found. Consider adding a security policy."
            echo "Creating a basic SECURITY.md file..."
            exit 1
          fi
  # SAST with Semgrep
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      # Run Semgrep - automatically uses cloud rules if SEMGREP_APP_TOKEN is set
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@713efdd345f3035192eaa63f56867b88e63e4e5d # v1
        env:
          # If token is set, Semgrep will use cloud configuration
          # If not set, it will use the default rules
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
      # Upload Semgrep results to GitHub Security tab
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        if: always() # Upload even if Semgrep step fails
        with:
          sarif_file: semgrep.sarif
        continue-on-error: true
  # Snyk Security Scanning (Free for Open Source)
  # TODO: Enable once SNYK_TOKEN is configured
  # snyk:
  #   name: Snyk Security
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
  #
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  #
  #   - name: Run Snyk to check for vulnerabilities
  #     uses: snyk/actions/swift@cdb760004ba9ea4d525f2e043745dfe85bb9077e # master
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --severity-threshold=high
  #     continue-on-error: true  # Don't fail if Snyk is not configured
  #
  #   - name: Upload Snyk results to GitHub Code Scanning
  #     uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
  #     if: always() && env.SNYK_TOKEN != ''
  #     with:
  #       sarif_file: snyk.sarif
  #     continue-on-error: true

  # License scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run License Scan
        uses: fossas/fossa-action@af5662f6f8877dad2ea85109ee5444f4ca3b0fe2 # main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        continue-on-error: true # Don't fail if FOSSA is not configured
  # Security Scorecard
  scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: github.event_name != 'pull_request' && needs.check-skip.outputs.should-skip != 'true'
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Run Scorecard
        uses: ossf/scorecard-action@62b2cac7ed8198b15735ed49ab1e5cf35480ba46 # v2.4.0
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: false
      - name: Upload results to code scanning
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          sarif_file: results.sarif
  # Summary job
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant, basic-checks, dependency-review, trufflehog, semgrep, scorecard]
    if: always()
    permissions:
      contents: read
    steps:
      - name: Security Scan Summary
        env:
          BASIC_CHECKS_RESULT: ${{ needs.basic-checks.result }}
          DEPENDENCY_REVIEW_RESULT: ${{ needs.dependency-review.result }}
          TRUFFLEHOG_RESULT: ${{ needs.trufflehog.result }}
          SEMGREP_RESULT: ${{ needs.semgrep.result }}
        run: "echo \"## Security Scan Summary\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n\n# Check job statuses\nif [ \"$BASIC_CHECKS_RESULT\" == \"success\" ]; then\n  echo \"✅ Basic Security Checks: Passed\" >> $GITHUB_STEP_SUMMARY\nelse\n  echo \"❌ Basic Security Checks: Failed\" >> $GITHUB_STEP_SUMMARY\nfi\n\necho \"\U0001F50D CodeQL Analysis: Running in dedicated workflow (.github/workflows/codeql.yml)\" >> $GITHUB_STEP_SUMMARY\n\nif [ \"$DEPENDENCY_REVIEW_RESULT\" == \"success\" ] || [ \"$DEPENDENCY_REVIEW_RESULT\" == \"skipped\" ]; then\n  echo \"✅ Dependency Review: Passed\" >> $GITHUB_STEP_SUMMARY\nelse\n  echo \"❌ Dependency Review: Failed\" >> $GITHUB_STEP_SUMMARY\nfi\n\nif [ \"$TRUFFLEHOG_RESULT\" == \"success\" ]; then\n  echo \"✅ Secret Scanning: Passed\" >> $GITHUB_STEP_SUMMARY\nelse\n  echo \"❌ Secret Scanning: Failed\" >> $GITHUB_STEP_SUMMARY\nfi\n\nif [ \"$SEMGREP_RESULT\" == \"success\" ]; then\n  echo \"✅ SAST (Semgrep): Passed\" >> $GITHUB_STEP_SUMMARY\nelse\n  echo \"❌ SAST (Semgrep): Failed\" >> $GITHUB_STEP_SUMMARY\nfi\n\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"View detailed results in the Security tab.\" >> $GITHUB_STEP_SUMMARY\n"
