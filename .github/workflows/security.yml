name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: read

jobs:
  # Check if this is a release-please branch
  check-skip:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.check.outputs.should-skip }}
    steps:
      - name: Check if release-please branch
        id: check
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF: ${{ github.ref }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Event: $EVENT_NAME"
          echo "Ref: $REF"
          echo "Head ref: $HEAD_REF"
          echo "Base ref: $BASE_REF"
          
          # For pull requests, check the head branch name
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            if [[ "$HEAD_REF" == release-please--* ]]; then
              echo "should-skip=true" >> $GITHUB_OUTPUT
              echo "Skipping security checks for release-please PR from branch: $HEAD_REF"
            else
              echo "should-skip=false" >> $GITHUB_OUTPUT
            fi
          # For pushes, check the ref name
          elif [[ "$REF_NAME" == release-please--* ]]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "Skipping security checks for release-please branch: $REF_NAME"
          else
            echo "should-skip=false" >> $GITHUB_OUTPUT
          fi

  cancel-redundant:
    name: Cancel Redundant Workflows
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.should-skip != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cancel redundant workflow runs
        uses: ./.github/actions/cancel-redundant-workflows
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Basic security checks
  basic-checks:
    name: Basic Security Checks
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for secrets in code
      run: |
        echo "üîç Checking for potential secrets in source code..."
        
        # Initialize counter
        found_issues=0
        
        # Check Swift files for hardcoded secrets
        echo "Checking Swift files..."
        swift_files=$(find . -name "*.swift" -type f 2>/dev/null || true)
        
        if [ -n "$swift_files" ]; then
          for file in $swift_files; do
            # Check for obvious secret patterns
            if grep -q -i -E 'password\s*=\s*"[^"]+"' "$file" 2>/dev/null; then
              echo "‚ö†Ô∏è  Potential hardcoded password in: $file"
              found_issues=$((found_issues + 1))
            fi
            if grep -q -i -E 'api_?key\s*=\s*"[^"]+"' "$file" 2>/dev/null; then
              echo "‚ö†Ô∏è  Potential hardcoded API key in: $file"
              found_issues=$((found_issues + 1))
            fi
            if grep -q -i -E 'secret\s*=\s*"[^"]+"' "$file" 2>/dev/null; then
              echo "‚ö†Ô∏è  Potential hardcoded secret in: $file"
              found_issues=$((found_issues + 1))
            fi
          done
        fi
        
        # Check for private key files
        echo ""
        echo "Checking for private key files..."
        key_files=$(find . -type f \( -name "*.pem" -o -name "*.key" -o -name "*.p12" -o -name "id_rsa*" \) -not -path "./.git/*" 2>/dev/null || true)
        if [ -n "$key_files" ]; then
          echo "‚ö†Ô∏è  Found private key files:"
          echo "$key_files"
          found_issues=$((found_issues + 1))
        fi
        
        # Check for .env files
        echo ""
        echo "Checking for .env files..."
        env_files=$(find . -name ".env*" -type f -not -name ".env.example" -not -path "./.git/*" 2>/dev/null || true)
        if [ -n "$env_files" ]; then
          echo "‚ö†Ô∏è  Found .env files that might contain secrets:"
          echo "$env_files"
          found_issues=$((found_issues + 1))
        fi
        
        # Summary
        echo ""
        if [ $found_issues -gt 0 ]; then
          echo "‚ùå Found $found_issues potential security issues."
          echo ""
          echo "If these are false positives:"
          echo "- Example passwords in documentation are okay"
          echo "- GitHub Actions secrets (\${{ secrets.XXX }}) are safe"
          echo "- .env.example files are acceptable"
          exit 1
        else
          echo "‚úÖ No obvious secrets found in source code."
        fi
        
    - name: Check file permissions
      run: |
        echo ""
        echo "üîç Checking for overly permissive files..."
        
        # Find files with world-writable permissions
        permissive_files=$(find . -type f -perm -o+w -not -path "./.git/*" 2>/dev/null || true)
        
        if [ -n "$permissive_files" ]; then
          echo "‚ö†Ô∏è  Warning: Found world-writable files:"
          echo "$permissive_files"
          echo ""
          echo "Fix with: chmod o-w <filename>"
        else
          echo "‚úÖ No overly permissive files found."
        fi
        
    - name: Security TODOs check
      run: |
        echo ""
        echo "üîç Checking for security-related TODOs..."
        
        security_todos=$(grep -r -i -E "TODO.*security|FIXME.*security|XXX.*security|HACK.*security" . \
          --exclude-dir=.git \
          --exclude-dir=node_modules \
          --exclude="*.md" 2>/dev/null || true)
        
        if [ -n "$security_todos" ]; then
          echo "üìù Found security-related TODOs (review these):"
          echo "$security_todos" | head -10
          echo ""
          echo "Note: Security TODOs should be tracked in issues, not code."
        else
          echo "‚úÖ No security TODOs found."
        fi

  # CodeQL Analysis for code scanning
  codeql:
    name: CodeQL Analysis
    runs-on: macos-latest
    timeout-minutes: 30
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['swift']
        # Add more languages as needed: ['swift', 'javascript', 'python']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Optionally specify custom queries
        queries: security-extended,security-and-quality
        
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    # Cache Swift Package Manager dependencies and build artifacts
    - name: Cache SPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', '**/Package.resolved') }}-${{ hashFiles('Sources/**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-spm-${{ hashFiles('Package.swift', '**/Package.resolved') }}-
          ${{ runner.os }}-spm-
    
        
    - name: Build Swift Project for CodeQL
      env:
        CODEQL_EXTRACTOR_SWIFT_LOG_LEVEL: 5
      run: |
        echo "Building MagSafe Guard for CodeQL analysis..."
        echo "Current directory: $(pwd)"
        echo "Swift version: $(swift --version)"
        
        # Create Package.resolved if it doesn't exist
        if [ ! -f "Package.resolved" ]; then
          echo "Creating Package.resolved..."
          swift package resolve
        fi
        
        # Check if we have a cached build
        if [ -d ".build/debug" ] && [ -f ".build/debug/MagSafeGuard" ]; then
          echo "Found cached build, verifying..."
          # Touch source files to ensure CodeQL sees them
          find Sources -name "*.swift" -exec touch {} \;
          # Do a quick incremental build
          swift build --configuration debug
        else
          echo "No cached build found, building from scratch..."
          swift build --configuration debug --verbose
        fi
        
        # List built products
        echo ""
        echo "Built products:"
        find .build -name "*.swiftmodule" -o -name "*.o" | head -20
        
        # Ensure source files are visible
        echo ""
        echo "Swift source files:"
        find Sources -name "*.swift" -type f
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: github.event_name == 'pull_request' && needs.check-skip.outputs.should-skip != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        # Fail on high severity vulnerabilities
        fail-on-severity: high
        # Check for license issues
        license-check: true
        # Allowed licenses (customize based on your needs)
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC, MPL-2.0, AGPL-3.0, LGPL-3.0

  # Secret scanning with TruffleHog
  trufflehog:
    name: Secret Scanning
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for scanning
        
    - name: TruffleHog OSS
      id: trufflehog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true
        
    - name: Check TruffleHog Results
      env:
        TRUFFLEHOG_OUTCOME: ${{ steps.trufflehog.outcome }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      run: |
        if [[ "$TRUFFLEHOG_OUTCOME" == "failure" ]]; then
          echo "TruffleHog scan failed. Checking if it's due to BASE==HEAD..."
          
          # Get the default branch commit
          BASE_COMMIT=$(git rev-parse "origin/${DEFAULT_BRANCH}" 2>/dev/null || echo "")
          HEAD_COMMIT=$(git rev-parse HEAD)
          
          if [[ "$BASE_COMMIT" == "$HEAD_COMMIT" ]]; then
            echo "‚úÖ BASE and HEAD commits are the same. This is expected for direct pushes to ${DEFAULT_BRANCH}."
            echo "No incremental scan needed - all secrets would have been caught in previous scans."
          else
            echo "‚ùå TruffleHog failed for another reason. Please check the logs above."
            exit 1
          fi
        else
          echo "‚úÖ TruffleHog scan completed successfully"
        fi

  # Security Policy Check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for security policy
      run: |
        if [ ! -f "docs/SECURITY.md" ] && [ ! -f ".github/SECURITY.md" ] && [ ! -f "SECURITY.md" ]; then
          echo "::warning::No SECURITY.md file found. Consider adding a security policy."
          echo "Creating a basic SECURITY.md file..."
          exit 1
        fi

  # SAST with Semgrep
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Run Semgrep - automatically uses cloud rules if SEMGREP_APP_TOKEN is set
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      env:
        # If token is set, Semgrep will use cloud configuration
        # If not set, it will use the default rules
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true
      
    # Upload Semgrep results to GitHub Security tab
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always() # Upload even if Semgrep step fails
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

  # Snyk Security Scanning (Free for Open Source)
  # TODO: Enable once SNYK_TOKEN is configured
  # snyk:
  #   name: Snyk Security
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     
  #   - name: Run Snyk to check for vulnerabilities
  #     uses: snyk/actions/swift@master
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --severity-threshold=high
  #     continue-on-error: true  # Don't fail if Snyk is not configured
  #     
  #   - name: Upload Snyk results to GitHub Code Scanning
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always() && env.SNYK_TOKEN != ''
  #     with:
  #       sarif_file: snyk.sarif
  #     continue-on-error: true

  # License scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run License Scan
      uses: fossas/fossa-action@main
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
      continue-on-error: true  # Don't fail if FOSSA is not configured

  # Security Scorecard
  scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant]
    if: github.event_name != 'pull_request' && needs.check-skip.outputs.should-skip != 'true'
    
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        
    - name: Run Scorecard
      uses: ossf/scorecard-action@v2.4.0
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: false
        
    - name: Upload results to code scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif


  # Summary job
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [check-skip, cancel-redundant, basic-checks, codeql, dependency-review, trufflehog, semgrep, scorecard]
    if: always()
    
    steps:
    - name: Security Scan Summary
      env:
        BASIC_CHECKS_RESULT: ${{ needs.basic-checks.result }}
        CODEQL_RESULT: ${{ needs.codeql.result }}
        DEPENDENCY_REVIEW_RESULT: ${{ needs.dependency-review.result }}
        TRUFFLEHOG_RESULT: ${{ needs.trufflehog.result }}
        SEMGREP_RESULT: ${{ needs.semgrep.result }}
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [ "$BASIC_CHECKS_RESULT" == "success" ]; then
          echo "‚úÖ Basic Security Checks: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Basic Security Checks: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$CODEQL_RESULT" == "success" ]; then
          echo "‚úÖ CodeQL Analysis: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå CodeQL Analysis: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$DEPENDENCY_REVIEW_RESULT" == "success" ] || [ "$DEPENDENCY_REVIEW_RESULT" == "skipped" ]; then
          echo "‚úÖ Dependency Review: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Dependency Review: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$TRUFFLEHOG_RESULT" == "success" ]; then
          echo "‚úÖ Secret Scanning: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Secret Scanning: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$SEMGREP_RESULT" == "success" ]; then
          echo "‚úÖ SAST (Semgrep): Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå SAST (Semgrep): Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed results in the Security tab." >> $GITHUB_STEP_SUMMARY