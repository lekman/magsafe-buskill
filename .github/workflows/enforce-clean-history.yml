name: Enforce Clean History
on:
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  contents: read
jobs:
  cancel-redundant:
    name: Cancel Redundant Workflows
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Cancel redundant workflow runs
        uses: ./.github/actions/cancel-redundant-workflows
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  enforce-clean-commits:
    name: Enforce Clean Commit History
    runs-on: ubuntu-latest
    needs: cancel-redundant
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Scan and require clean history
        env:
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
        run: "echo \"\U0001F50D Scanning commit history for prohibited content...\"\n\n# Define blocked words\nBLOCKED_WORDS=(\"claude\" \"anthropic\" \"co-authored\")\n\n# Get all commits in this PR\nCOMMITS=$(git log --format=\"%H %s\" \"origin/${BASE_REF}..HEAD\")\n\n# Check for blocked words\nVIOLATIONS=\"\"\nwhile IFS= read -r commit; do\n  HASH=$(echo \"$commit\" | cut -d' ' -f1)\n  MESSAGE=$(echo \"$commit\" | cut -d' ' -f2-)\n  \n  for word in \"${BLOCKED_WORDS[@]}\"; do\n    if echo \"$MESSAGE\" | grep -qi \"$word\"; then\n      VIOLATIONS=\"$VIOLATIONS\\n  • $HASH: $MESSAGE (contains '$word')\"\n    fi\n  done\ndone <<< \"$COMMITS\"\n\nif [ -n \"$VIOLATIONS\" ]; then\n  echo \"❌ COMMIT HISTORY CONTAINS PROHIBITED WORDS\"\n  echo \"\"\n  echo \"The following commits must be removed or rewritten:\"\n  echo -e \"$VIOLATIONS\"\n  echo \"\"\n  echo \"\U0001F4DD TO FIX THIS ISSUE:\"\n  echo \"\"\n  echo \"Option 1 - Rewrite history (recommended):\"\n  echo \"  git rebase -i origin/${BASE_REF}\"\n  echo \"  # Mark problematic commits as 'reword' or 'drop'\"\n  echo \"  # Save and rewrite the messages\"\n  echo \"  git push --force-with-lease\"\n  echo \"\"\n  echo \"Option 2 - Start fresh:\"\n  echo \"  git checkout ${BASE_REF}\"\n  echo \"  git checkout -b clean-branch\"\n  echo \"  # Cherry-pick only clean commits or recreate changes\"\n  echo \"  git push -u origin clean-branch\"\n  echo \"\"\n  echo \"⚠️ This PR cannot be merged until the history is clean.\"\n  \n  # Write detailed instructions to GitHub Step Summary\n  echo \"## ❌ Commit History Violation Detected\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"### ⚠️ IMPORTANT: You MUST delete or rewrite these commits yourself\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"GitHub Actions cannot automatically delete commits from your branch. You must clean your git history manually.\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"### \U0001F6AB Prohibited Commits Found:\" >> $GITHUB_STEP_SUMMARY\n  echo \"\\`\\`\\`\" >> $GITHUB_STEP_SUMMARY\n  echo -e \"$VIOLATIONS\" | sed 's/^/  /' >> $GITHUB_STEP_SUMMARY\n  echo \"\\`\\`\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"### \U0001F6E0️ Step-by-Step Fix Instructions:\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"#### Option 1: Delete the problematic commits (Recommended)\" >> $GITHUB_STEP_SUMMARY\n  echo \"1. Open your terminal and navigate to your repository\" >> $GITHUB_STEP_SUMMARY\n  echo \"2. Run: \\`git fetch origin\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"3. Run: \\`git rebase -i origin/${BASE_REF}\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"4. In the editor that opens:\" >> $GITHUB_STEP_SUMMARY\n  echo \"   - Find the commits listed above\" >> $GITHUB_STEP_SUMMARY\n  echo \"   - Change \\`pick\\` to \\`drop\\` for commits you want to DELETE\" >> $GITHUB_STEP_SUMMARY\n  echo \"   - Change \\`pick\\` to \\`reword\\` for commits you want to EDIT\" >> $GITHUB_STEP_SUMMARY\n  echo \"   - Save and close the editor\" >> $GITHUB_STEP_SUMMARY\n  echo \"5. If you chose \\`reword\\`, edit the commit messages to remove blocked words\" >> $GITHUB_STEP_SUMMARY\n  echo \"6. Run: \\`git push --force-with-lease origin $(echo ${HEAD_REF} | sed 's/refs\\/heads\\///')\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"#### Option 2: Start with a clean branch\" >> $GITHUB_STEP_SUMMARY\n  echo \"1. Run: \\`git checkout ${BASE_REF}\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"2. Run: \\`git pull origin ${BASE_REF}\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"3. Run: \\`git checkout -b $(echo ${HEAD_REF} | sed 's/refs\\/heads\\///')-clean\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"4. Cherry-pick only the good commits or recreate your changes\" >> $GITHUB_STEP_SUMMARY\n  echo \"5. Run: \\`git push -u origin $(echo ${HEAD_REF} | sed 's/refs\\/heads\\///')-clean\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"6. Close this PR and create a new one from the clean branch\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"### ❓ Why can't this be automatic?\" >> $GITHUB_STEP_SUMMARY\n  echo \"- Git history is immutable once pushed\" >> $GITHUB_STEP_SUMMARY\n  echo \"- Only you can rewrite your branch history\" >> $GITHUB_STEP_SUMMARY\n  echo \"- This protects against accidental data loss\" >> $GITHUB_STEP_SUMMARY\n  echo \"- GitHub Actions has read-only access to protect your code\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"### \U0001F4CB Blocked Words:\" >> $GITHUB_STEP_SUMMARY\n  echo \"- \\`claude\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"- \\`anthropic\\`\" >> $GITHUB_STEP_SUMMARY  \n  echo \"- \\`co-authored\\`\" >> $GITHUB_STEP_SUMMARY\n  echo \"\" >> $GITHUB_STEP_SUMMARY\n  echo \"### \U0001F504 After Fixing:\" >> $GITHUB_STEP_SUMMARY\n  echo \"Once you've cleaned your commit history and force-pushed, this check will run again automatically.\" >> $GITHUB_STEP_SUMMARY\n  \n  exit 1\nfi\n\necho \"✅ Commit history is clean\"\n\n# Write success message to GitHub Step Summary\necho \"## ✅ Commit History Clean\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"All commits in this PR have been verified and contain no prohibited words.\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"### \U0001F4CB Checked for blocked words:\" >> $GITHUB_STEP_SUMMARY\necho \"- \\`claude\\` ✓\" >> $GITHUB_STEP_SUMMARY\necho \"- \\`anthropic\\` ✓\" >> $GITHUB_STEP_SUMMARY\necho \"- \\`co-authored\\` ✓\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"This PR is ready for review from a commit history perspective.\" >> $GITHUB_STEP_SUMMARY\n"
      - name: Add PR comment for violations
        if: failure()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |-
            const body = `## ❌ Commit History Violation

            This PR contains commits with prohibited words. These commits must be removed or rewritten before merging.

            ### Required Actions:

            1. **Rewrite the problematic commits** using \`git rebase -i\`
            2. **Force push** the cleaned history
            3. **Request a new review** after fixing

            ### Blocked Words:
            - \`claude\`
            - \`anthropic\`
            - \`co-authored\`

            Please see the [Commit Message Enforcement Guide](https://github.com/${{ github.repository }}/blob/main/docs/commit-message-enforcement.md) for detailed instructions.

            ⚠️ **Note**: This is a hard requirement. The PR cannot be merged until all commits are clean.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
