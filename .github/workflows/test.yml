name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check if this is a release-please branch
  check-skip:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should-skip: ${{ steps.check.outputs.should-skip }}
    steps:
      - name: Check if release-please branch
        id: check
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF: ${{ github.ref }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Event: $EVENT_NAME"
          echo "Ref: $REF"
          echo "Head ref: $HEAD_REF"
          echo "Base ref: $BASE_REF"

          # For pull requests, check the head branch name
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            if [[ "$HEAD_REF" == release-please--* ]]; then
              echo "should-skip=true" >> $GITHUB_OUTPUT
              echo "Skipping tests for release-please PR from branch: $HEAD_REF"
            else
              echo "should-skip=false" >> $GITHUB_OUTPUT
            fi
          # For pushes, check the ref name
          elif [[ "$REF_NAME" == release-please--* ]]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "Skipping tests for release-please branch: $REF_NAME"
          else
            echo "should-skip=false" >> $GITHUB_OUTPUT
          fi

  test:
    name: Test Suite
    runs-on: macos-latest
    needs: check-skip
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Full history for SonarCloud blame data

      - name: Setup Swift Build Environment
        uses: ./.github/actions/swift
        with:
          swift-version: "5.9"

      - name: Clean build artifacts
        run: |
          echo "Cleaning build artifacts..."
          task clean

      - name: Run tests with coverage
        env:
          CI: true
        run: task swift:test:coverage

      # Coverage reports are generated by task test:coverage
      - name: Convert coverage to SonarQube format
        run: |
          # Convert LCOV to SonarQube format using task
          task sonar:convert

          echo "Coverage files created:"
          ls -la coverage.xml || echo "No coverage files found"
          echo "Coverage report size: $(wc -c < coverage.xml 2>/dev/null || echo 0) bytes"

          echo "LCOV file:"
          ls -la coverage.lcov || echo "No LCOV file found"
          echo "LCOV report size: $(wc -c < coverage.lcov 2>/dev/null || echo 0) bytes"

      - name: Find LCOV files
        id: find-lcov
        run: |
          # Find all .lcov files in the current directory
          LCOV_FILES=$(find . -name "*.lcov" -type f | paste -sd "," -)
          if [ -n "$LCOV_FILES" ]; then
            echo "Found LCOV files: $LCOV_FILES"
            echo "files=$LCOV_FILES" >> $GITHUB_OUTPUT
          else
            echo "No LCOV files found"
            echo "files=" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5c47607acb93fed5485fdbf7232e8a31425f672a # v5
        with:
          use_oidc: true
          codecov_yml_path: .codecov.yml
          disable_search: true
          files: ${{ steps.find-lcov.outputs.files }}
        if: steps.find-lcov.outputs.files != ''

      - name: Install and run SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Install sonar-scanner using homebrew (available on macOS runners)
          brew install sonar-scanner

          # Run sonar-scanner directly to avoid deprecated action issues
          # The sonar-project.properties file contains all necessary configuration
          if [ -f "coverage.xml" ]; then
            echo "Coverage file found: coverage.xml ($(wc -c < coverage.xml) bytes)"
            echo "Running SonarCloud analysis with coverage..."
            echo "Current directory: $(pwd)"
            echo "Coverage file path: $(realpath coverage.xml)"
          else
            echo "WARNING: No coverage.xml file found"
            echo "Running SonarCloud analysis without coverage..."
          fi

          # Run the scanner
          sonar-scanner
