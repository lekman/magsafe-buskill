name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  # Check if this is a release-please branch
  check-skip:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should-skip: ${{ steps.check.outputs.should-skip }}
    steps:
      - name: Check if release-please branch
        id: check
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF: ${{ github.ref }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Event: $EVENT_NAME"
          echo "Ref: $REF"
          echo "Head ref: $HEAD_REF"
          echo "Base ref: $BASE_REF"

          # For pull requests, check the head branch name
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            if [[ "$HEAD_REF" == release-please--* ]]; then
              echo "should-skip=true" >> $GITHUB_OUTPUT
              echo "Skipping tests for release-please PR from branch: $HEAD_REF"
            else
              echo "should-skip=false" >> $GITHUB_OUTPUT
            fi
          # For pushes, check the ref name
          elif [[ "$REF_NAME" == release-please--* ]]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "Skipping tests for release-please branch: $REF_NAME"
          else
            echo "should-skip=false" >> $GITHUB_OUTPUT
          fi

  cancel-redundant:
    name: Cancel Redundant Workflows
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cancel redundant workflow runs
        uses: ./.github/actions/cancel-redundant-workflows
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test Suite
    runs-on: macos-latest
    needs: [check-skip, cancel-redundant]
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Full history for SonarCloud blame data

      - name: Setup Swift Build Environment
        uses: ./.github/actions/setup-swift-build
        with:
          swift-version: "5.9"
          cache-key-suffix: "-test-v2" # Increment this to bust cache

      - name: Clean build artifacts
        run: |
          echo "Cleaning build artifacts..."
          swift package clean
          rm -rf .build

      - name: Run tests with coverage
        run: swift test --enable-code-coverage --parallel --num-workers 1

      # Convert Swift coverage to SonarQube generic XML format
      - name: Generate coverage report
        run: |
          # Find the coverage data - check multiple possible locations
          PROF_DATA=$(find .build -name 'default.profdata' -type f | head -1)
          EXECUTABLE=$(find .build -name 'MagSafeGuardPackageTests.xctest' -type d | head -1)/Contents/MacOS/MagSafeGuardPackageTests

          echo "Found profdata: $PROF_DATA"
          echo "Found executable: $EXECUTABLE"

          if [[ -f "$PROF_DATA" && -f "$EXECUTABLE" ]]; then
            echo "Generating SonarQube generic coverage XML..."

            # Convert llvm-cov output to SonarQube generic XML format
            {
              echo '<coverage version="1">'
              xcrun llvm-cov show "$EXECUTABLE" \
                -instr-profile="$PROF_DATA" \
                -use-color=false \
                -ignore-filename-regex=".*Tests\.swift|.*Mocks?\.swift|.*/MagSafeGuardApp\.swift|.*/PowerMonitorService\.swift|.*LAContext\.swift|.*/MacSystemActions\.swift|.*Protocol\.swift" | \
              awk '
                /^[[:space:]]*[^[:space:]]+:$/ {
                  if (in_file) print "  </file>"
                  gsub(/:$/, "", $1)
                  gsub(/&/, "\\&amp;", $1)
                  print "  <file path=\"" $1 "\">"
                  in_file = 1
                  next
                }
                /^[[:space:]]*[0-9]+\|/ {
                  split($0, parts, "|")
                  linenum = parts[1]
                  gsub(/^[[:space:]]+/, "", linenum)
                  gsub(/[[:space:]]+$/, "", linenum)

                  # Check if line is covered (has execution count)
                  if (match(parts[2], /^[[:space:]]*[0-9]+/)) {
                    print "    <lineToCover lineNumber=\"" linenum "\" covered=\"true\"/>"
                  } else if (match(parts[2], /^[[:space:]]*0/)) {
                    print "    <lineToCover lineNumber=\"" linenum "\" covered=\"false\"/>"
                  }
                }
                END {
                  if (in_file) print "  </file>"
                }
              '
              echo '</coverage>'
            } > coverage.xml

            echo "Coverage files created:"
            ls -la coverage.xml || echo "No coverage files found"
            echo "Coverage report size: $(wc -c < coverage.xml) bytes"

            # Also generate LCOV format for Codecov
            echo "Generating LCOV format..."
            xcrun llvm-cov export "$EXECUTABLE" \
              -instr-profile="$PROF_DATA" \
              -format=lcov \
              -ignore-filename-regex=".*Tests\.swift|.*Mocks?\.swift|.*/MagSafeGuardApp\.swift|.*/PowerMonitorService\.swift|.*LAContext\.swift|.*/MacSystemActions\.swift|.*Protocol\.swift" \
              > coverage.lcov

            echo "LCOV file created:"
            ls -la coverage.lcov || echo "No LCOV file found"
            echo "LCOV report size: $(wc -c < coverage.lcov) bytes"
          else
            echo "Coverage data not found"
            echo "PROF_DATA: $PROF_DATA"
            echo "EXECUTABLE: $EXECUTABLE"
            echo "Build directory contents:"
            find .build -type f -name "*.profdata" -o -name "*.xctest" | head -20
            exit 1
          fi

      - name: Find LCOV files
        id: find-lcov
        run: |
          # Find all .lcov files in the current directory
          LCOV_FILES=$(find . -name "*.lcov" -type f | paste -sd "," -)
          if [ -n "$LCOV_FILES" ]; then
            echo "Found LCOV files: $LCOV_FILES"
            echo "files=$LCOV_FILES" >> $GITHUB_OUTPUT
          else
            echo "No LCOV files found"
            echo "files=" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5c47607acb93fed5485fdbf7232e8a31425f672a # v5
        with:
          use_oidc: true
          codecov_yml_path: .codecov.yml
          disable_search: true
          files: ${{ steps.find-lcov.outputs.files }}
        if: steps.find-lcov.outputs.files != ''

      - name: Install and run SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Install sonar-scanner using homebrew (available on macOS runners)
          brew install sonar-scanner

          # Run sonar-scanner directly to avoid deprecated action issues
          # The sonar-project.properties file contains all necessary configuration
          if [ -f "coverage.xml" ]; then
            echo "Coverage file found: coverage.xml ($(wc -c < coverage.xml) bytes)"
            echo "Running SonarCloud analysis with coverage..."
            echo "Current directory: $(pwd)"
            echo "Coverage file path: $(realpath coverage.xml)"
          else
            echo "WARNING: No coverage.xml file found"
            echo "Running SonarCloud analysis without coverage..."
          fi

          # Run the scanner
          sonar-scanner
