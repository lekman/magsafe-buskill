name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  cancel-redundant:
    name: Cancel Redundant Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cancel redundant workflow runs
        uses: ./.github/actions/cancel-redundant-workflows
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test Suite
    runs-on: macos-latest
    needs: cancel-redundant
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.9"
    
    # Cache Swift Package Manager dependencies
    - name: Cache SPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', '**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
        
    - name: Build
      run: swift build -v
      
    - name: Run tests with coverage
      env:
        CI: true
      run: swift test --enable-code-coverage
        
    # Convert Swift coverage to lcov format for Codecov
    - name: Generate coverage report
      run: |
        # Find the coverage data
        PROF_DATA=$(find .build/debug -name 'default.profdata' -type f)
        EXECUTABLE=$(find .build/debug -name 'MagSafeGuardPackageTests.xctest' -type d)/Contents/MacOS/MagSafeGuardPackageTests
        
        # Generate lcov format
        if [[ -f "$PROF_DATA" && -f "$EXECUTABLE" ]]; then
          xcrun llvm-cov export \
            "$EXECUTABLE" \
            -instr-profile="$PROF_DATA" \
            -format="lcov" > coverage.lcov
        else
          echo "Coverage data not found, creating minimal test executable coverage"
          echo "" > coverage.lcov
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.lcov
        flags: unittests
        name: codecov-swift
        fail_ci_if_error: false # Don't fail if upload fails
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}