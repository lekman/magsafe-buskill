name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check if this is a release-please branch
  check-skip:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should-skip: ${{ steps.check.outputs.should-skip }}
    steps:
      - name: Check if release-please branch
        id: check
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF: ${{ github.ref }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "Event: $EVENT_NAME"
          echo "Ref: $REF"
          echo "Head ref: $HEAD_REF"
          echo "Base ref: $BASE_REF"

          # For pull requests, check the head branch name
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            if [[ "$HEAD_REF" == release-please--* ]]; then
              echo "should-skip=true" >> $GITHUB_OUTPUT
              echo "Skipping tests for release-please PR from branch: $HEAD_REF"
            else
              echo "should-skip=false" >> $GITHUB_OUTPUT
            fi
          # For pushes, check the ref name
          elif [[ "$REF_NAME" == release-please--* ]]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "Skipping tests for release-please branch: $REF_NAME"
          else
            echo "should-skip=false" >> $GITHUB_OUTPUT
          fi

  test:
    name: Test Suite
    runs-on: macos-15
    needs: check-skip
    if: needs.check-skip.outputs.should-skip != 'true'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709 # 11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0 # Full history for SonarCloud blame data

      - name: Setup Swift Build Environment
        uses: ./.github/actions/swift
        with:
          swift-version: "6.0"

      - name: Run Tests
        timeout-minutes: 5
        run: |
          echo "ðŸ§ª Running Clean Architecture tests with coverage reporting..."
          # Use main test task which includes Clean Architecture coverage reporting
          task test
        env:
          CI: true

      - name: Upload coverage to CodeCov
        if: always()
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          use_oidc: true
          files: ./coverage.lcov
          flags: unittests
          name: codecov-umbrella
          slug: lekman/magsafe-buskill
          codecov_yml_path: .codecov.yml
          fail_ci_if_error: false

      - name: SonarCloud Scan
        if: always()
        uses: ./.github/actions/sonar
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}

      - name: Test Summary
        if: always()
        run: |
          echo "## ðŸ“Š Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Display the markdown coverage report directly
          if [ -f coverage-report.md ]; then
            cat coverage-report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: tests
          path: |
            coverage.lcov
            coverage.xml
            coverage-report.txt
            coverage-report.md
          retention-days: 7
