# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

# This file focuses on Swift Package Manager (SPM) tasks for CI and cross-platform compilation
# For Xcode-specific tasks (UI testing, app packaging), use the main Taskfile.yml

vars:
  # SPM build directories
  SPM_BUILD_DIR: ".build"

tasks:
  default:
    desc: List all Swift tasks
    silent: true
    cmds:
      - task --list | grep "^\\* swift:" | grep -v "::" || true

  test:
    desc: Run all tests with coverage using Swift Package Manager
    silent: true
    cmds:
      - |
        echo "🧪 Running tests with Swift Package Manager..."
        echo "=============================================="

        # Clean previous artifacts
        echo "🧹 Cleaning previous build artifacts..."
        rm -rf {{.SPM_BUILD_DIR}} coverage.lcov coverage.xml coverage-report.txt

        # Run tests with coverage enabled
        echo "🧪 Running all tests with coverage..."
        swift test --enable-code-coverage --parallel

        # Find coverage data
        echo "📊 Generating coverage reports..."
        PROF_DATA=$(find {{.SPM_BUILD_DIR}} -name 'default.profdata' -type f | head -1)

        if [ -z "$PROF_DATA" ]; then
          echo "❌ No coverage data found"
          exit 1
        fi

        # Find the test executable
        TEST_EXEC=$(find {{.SPM_BUILD_DIR}} -name '*PackageTests.xctest' -type d | head -1)/Contents/MacOS/*PackageTests

        if [ ! -f "$TEST_EXEC" ]; then
          # Linux path structure
          TEST_EXEC=$(find {{.SPM_BUILD_DIR}} -name '*PackageTests' -type f -perm +111 | grep -v '.dSYM' | head -1)
        fi

        if [ ! -f "$TEST_EXEC" ]; then
          echo "❌ Test executable not found"
          exit 1
        fi

        # Generate LCOV report
        echo "📄 Generating LCOV coverage report..."
        xcrun llvm-cov export \
          -format=lcov \
          -instr-profile="$PROF_DATA" \
          "$TEST_EXEC" > coverage.lcov

        # Generate text report
        echo "📄 Generating text coverage report..."
        xcrun llvm-cov report \
          -instr-profile="$PROF_DATA" \
          "$TEST_EXEC" \
          -ignore-filename-regex=".*Tests.*|.*Mock.*|.*\.build.*" > coverage-report.txt

        # Show coverage summary
        echo ""
        echo "📊 Coverage Summary:"
        echo "==================="
        tail -1 coverage-report.txt

        # Convert LCOV to Cobertura XML for SonarCloud
        echo ""
        echo "📄 Converting to Cobertura XML format..."
        task sonar:convert || {
          # Fallback: Create basic XML if conversion fails
          echo '<?xml version="1.0" ?>' > coverage.xml
          echo '<coverage version="1">' >> coverage.xml
          echo '</coverage>' >> coverage.xml
        }

        echo ""
        echo "✅ SPM tests completed with coverage"
        echo "   - LCOV: coverage.lcov"
        echo "   - XML: coverage.xml"
        echo "   - Text: coverage-report.txt"

  lint:
    desc: Run SwiftLint to check code style
    silent: true
    cmds:
      - |
        echo "🔍 Linting Swift files..."
        if command -v swiftlint &> /dev/null; then
          swiftlint lint --quiet
          if [ $? -eq 0 ]; then
            echo "✅ SwiftLint passed"
          else
            echo "❌ SwiftLint found issues"
            echo ""
            echo "Run 'task swift:lint:fix' to auto-fix what's possible"
            exit 1
          fi
        else
          echo "⚠️  SwiftLint not installed"
          echo "   Install with: brew install swiftlint"
          echo "   Or run: task swift:setup"
        fi

  lint:fix:
    desc: Auto-fix SwiftLint issues where possible
    silent: true
    cmds:
      - |
        echo "🔧 Fixing Swift linting issues..."
        if command -v swiftlint &> /dev/null; then
          swiftlint lint --fix --quiet
          if [ $? -eq 0 ]; then
            echo "✅ SwiftLint fixes applied"
          else
            echo "⚠️  Some issues require manual fixing"
            echo ""
            echo "Run 'task swift:lint' to see remaining issues"
          fi
        else
          echo "⚠️  SwiftLint not installed"
          echo "   Install with: brew install swiftlint"
          echo "   Or run: task swift:setup"
        fi

  build:
    desc: Build project using Swift Package Manager
    silent: true
    cmds:
      - |
        echo "🔨 Building with Swift Package Manager..."
        swift build --configuration debug
        echo "✅ SPM build completed"

  clean:
    desc: Clean Swift Package Manager build artifacts
    silent: true
    cmds:
      - |
        echo "🧹 Cleaning SPM build artifacts..."
        rm -rf {{.SPM_BUILD_DIR}}
        rm -rf Package.resolved
        rm -f coverage.lcov coverage.xml coverage-report.txt
        echo "✅ SPM artifacts cleaned"

  setup:
    desc: Setup Swift development environment and tools
    silent: true
    cmds:
      - |
        echo "🔧 Setting up Swift environment..."

        # Check Swift version
        echo "Swift version:"
        swift --version
        echo ""

        # Detect OS
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')

        if [ "$OS" = "darwin" ]; then
          # macOS setup
          echo "📦 Setting up development tools for macOS..."

          # Check for Homebrew
          if ! command -v brew &> /dev/null; then
            echo "❌ Homebrew not found"
            echo "   Install from: https://brew.sh"
            exit 1
          fi

          # Install/Update SwiftLint
          if ! command -v swiftlint &> /dev/null; then
            echo "📦 Installing SwiftLint..."
            brew install swiftlint
          else
            echo "✅ SwiftLint already installed ($(swiftlint version))"
          fi

          # Install/Update swift-format (optional)
          if ! command -v swift-format &> /dev/null; then
            echo "📦 Installing swift-format (optional)..."
            brew install swift-format
          else
            echo "✅ swift-format already installed"
          fi
        else
          # Linux setup
          echo "📦 Setting up development tools for Linux..."
          echo "Note: On Linux, SwiftLint must be built from source or run via Docker"
        fi

        # Resolve package dependencies
        echo ""
        echo "📦 Resolving package dependencies..."
        swift package resolve

        echo ""
        echo "✅ Swift environment ready"

  sbom:
    desc: Generate Software Bill of Materials (SBOM) in SPDX format
    silent: true
    cmds:
      - |
        echo "📦 Generating SBOM for Swift project..."

        # Get package info
        PACKAGE_NAME=$(swift package dump-package | jq -r '.name')
        VERSION=$(git describe --tags --always 2>/dev/null || echo "1.0.0")
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        # Create SPDX SBOM
        echo "SPDXVersion: SPDX-2.3" > sbom.spdx
        echo "DataLicense: CC0-1.0" >> sbom.spdx
        echo "SPDXID: SPDXRef-DOCUMENT" >> sbom.spdx
        echo "DocumentName: ${PACKAGE_NAME}" >> sbom.spdx
        echo "DocumentNamespace: https://sbom.swift/${PACKAGE_NAME}/spdx-${VERSION}-$(date +%s)" >> sbom.spdx
        echo "Creator: Tool: swift-package-sbom-1.0.0" >> sbom.spdx
        echo "Created: ${TIMESTAMP}" >> sbom.spdx
        echo "" >> sbom.spdx

        # Package information
        echo "PackageName: ${PACKAGE_NAME}" >> sbom.spdx
        echo "SPDXID: SPDXRef-Package-${PACKAGE_NAME}" >> sbom.spdx
        echo "PackageVersion: ${VERSION}" >> sbom.spdx
        echo "PackageSupplier: Organization: Swift Package" >> sbom.spdx
        echo "PackageDownloadLocation: NOASSERTION" >> sbom.spdx
        echo "FilesAnalyzed: true" >> sbom.spdx
        echo "PackageVerificationCode: NOASSERTION" >> sbom.spdx
        echo "PackageLicenseConcluded: NOASSERTION" >> sbom.spdx
        echo "PackageLicenseDeclared: NOASSERTION" >> sbom.spdx
        echo "PackageCopyrightText: NOASSERTION" >> sbom.spdx
        echo "" >> sbom.spdx

        # Dependencies
        echo "" >> sbom.spdx
        echo "# Dependencies" >> sbom.spdx
        DEPS=$(swift package show-dependencies --format json | jq -r '.dependencies[]? | "PackageName: " + .name + "\nSPDXID: SPDXRef-Package-" + .identity + "\nPackageVersion: " + (.version // "unknown") + "\nPackageDownloadLocation: " + (.url // "NOASSERTION") + "\nFilesAnalyzed: false\nPackageLicenseConcluded: NOASSERTION\nPackageLicenseDeclared: NOASSERTION\nPackageCopyrightText: NOASSERTION\n\nRelationship: SPDXRef-Package-" + .identity + " DEPENDENCY_OF SPDXRef-Package-${PACKAGE_NAME}\n"' 2>/dev/null || echo "")

        if [ -n "$DEPS" ]; then
          echo "$DEPS" >> sbom.spdx
        fi

        echo "✅ Generated: sbom.spdx"
        echo "   Project: ${PACKAGE_NAME} v${VERSION}"

        # Also generate in JSON format
        swift package show-dependencies --format json > sbom-deps.json

        echo "✅ Also generated: sbom-deps.json (Swift dependencies)"
    sources:
      - Package.swift
      - Sources/**/*.swift
    generates:
      - sbom.spdx
      - sbom-deps.json

  # Internal tasks for backward compatibility
  _spm:test:
    internal: true
    cmds:
      - task: swift:test

  _spm:build:
    internal: true
    cmds:
      - task: swift:build

  _spm:clean:
    internal: true
    cmds:
      - task: swift:clean
