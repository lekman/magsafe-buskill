# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

# This file focuses on Swift Package Manager (SPM) tasks for CI and cross-platform compilation
# For Xcode-specific tasks (UI testing, app packaging), use the main Taskfile.yml

vars:
  # SPM build directories
  SPM_BUILD_DIR: "MagSafeGuardLib/.build"
  SPM_PACKAGE_DIR: "MagSafeGuardLib"

tasks:
  default:
    desc: List all Swift tasks
    silent: true
    cmds:
      - task --list | grep "^\\* swift:" | grep -v "::" || true

  test:
    desc: Run all tests with coverage using Swift Package Manager
    silent: true
    cmds:
      - |
        echo "üß™ Running tests with Swift Package Manager..."
        echo "=============================================="

        # Clean previous artifacts
        echo "üßπ Cleaning previous build artifacts..."
        rm -rf {{.SPM_BUILD_DIR}} coverage.lcov coverage.xml coverage-report.txt

        # Change to the library directory
        cd {{.SPM_PACKAGE_DIR}}

        # Run tests with coverage enabled
        echo "üß™ Running all tests with coverage..."
        if swift test --enable-code-coverage --parallel; then
          echo "‚úÖ Tests completed successfully"
        else
          # Check if tests actually passed despite exit code 1 (Swift toolchain issue)
          if swift test --enable-code-coverage --parallel 2>&1 | grep -q "Test run with .* tests passed"; then
            echo "‚úÖ Tests completed successfully (ignoring Swift toolchain exit code)"
          else
            echo "‚ùå Tests failed"
            exit 1
          fi
        fi

        # Find coverage data
        echo "üìä Generating coverage reports..."
        CODECOV_DIR=$(find .build -name 'codecov' -type d | head -1)
        if [ -n "$CODECOV_DIR" ] && [ -d "$CODECOV_DIR" ]; then
          echo "üìä Found coverage data in: $CODECOV_DIR"
          # Merge all profraw files into a single profdata file
          xcrun llvm-profdata merge -sparse "$CODECOV_DIR"/*.profraw -o coverage-merged.profdata
          PROF_DATA="coverage-merged.profdata"
        else
          # Fallback to default.profdata
          PROF_DATA=$(find .build -name 'default.profdata' -type f | head -1)
        fi

        if [ -z "$PROF_DATA" ]; then
          echo "‚ùå No coverage data found"
          exit 1
        fi

        # Find the test executable
        TEST_BUNDLE=$(find .build -name '*PackageTests.xctest' -type d | head -1)
        if [ -n "$TEST_BUNDLE" ]; then
          # macOS bundle structure
          TEST_EXEC="$TEST_BUNDLE/Contents/MacOS/MagSafeGuardLibPackageTests"
        else
          # Linux path structure
          TEST_EXEC=$(find .build -name '*PackageTests' -type f -perm +111 | grep -v '.dSYM' | head -1)
        fi

        if [ ! -f "$TEST_EXEC" ]; then
          echo "‚ùå Test executable not found"
          exit 1
        fi

        # Generate LCOV report
        echo "üìÑ Generating LCOV coverage report..."
        xcrun llvm-cov export \
          -format=lcov \
          -instr-profile="$PROF_DATA" \
          "$TEST_EXEC" > ../coverage.lcov

        # Generate text report
        echo "üìÑ Generating text coverage report..."
        xcrun llvm-cov report \
          -instr-profile="$PROF_DATA" \
          "$TEST_EXEC" \
          -ignore-filename-regex=".*Tests.*|.*Mock.*|.*\.build.*" > ../coverage-report.txt

        # Show coverage summary
        echo ""
        echo "üìä Coverage Summary:"
        echo "==================="
        tail -1 ../coverage-report.txt

        # Convert LCOV to Cobertura XML for SonarCloud
        echo ""
        echo "üìÑ Converting to Cobertura XML format..."
        cd ..

        # Search for lcov file in both local and CI locations
        LCOV_FILE=""
        if [ -f "coverage.lcov" ]; then
          LCOV_FILE="coverage.lcov"
        elif [ -f "MagSafeGuardLib/coverage.lcov" ]; then
          LCOV_FILE="MagSafeGuardLib/coverage.lcov"
          cp "$LCOV_FILE" coverage.lcov
        fi

        if [ -n "$LCOV_FILE" ]; then
          task sonar:convert || {
            # Fallback: Create basic XML if conversion fails
            echo '<?xml version="1.0" ?>' > coverage.xml
            echo '<coverage version="1">' >> coverage.xml
            echo '</coverage>' >> coverage.xml
          }
        else
          echo "‚ö†Ô∏è No LCOV file found, creating minimal XML"
          echo '<?xml version="1.0" ?>' > coverage.xml
          echo '<coverage version="1">' >> coverage.xml
          echo '</coverage>' >> coverage.xml
        fi

        echo ""
        echo "‚úÖ SPM tests completed with coverage"
        echo "   - LCOV: coverage.lcov"
        echo "   - XML: coverage.xml"
        echo "   - Text: coverage-report.txt"

  lint:
    desc: Run SwiftLint to check code style
    silent: true
    cmds:
      - |
        echo "üîç Linting Swift files..."
        if command -v swiftlint &> /dev/null; then
          # Run SwiftLint and save output to a temp file
          TEMP_FILE=$(mktemp)
          swiftlint lint > "$TEMP_FILE" 2>&1
          EXIT_CODE=$?

          # Extract summary line
          SUMMARY=$(tail -1 "$TEMP_FILE")

          # Check if there are violations
          if echo "$SUMMARY" | grep -q "Found 0 violations"; then
            echo "‚úÖ SwiftLint passed - no violations found"
            rm "$TEMP_FILE"
          else
            # Extract violation counts
            VIOLATIONS=$(echo "$SUMMARY" | grep -oE "Found [0-9]+ violations" | grep -oE "[0-9]+" || echo "0")
            SERIOUS=$(echo "$SUMMARY" | grep -oE "[0-9]+ serious" | grep -oE "[0-9]+" || echo "0")

            echo "‚ùå SwiftLint found issues:"
            echo "   - Total violations: $VIOLATIONS"
            echo "   - Serious violations: $SERIOUS"
            echo ""
            echo "$SUMMARY"
            echo ""
            echo "Run 'swiftlint lint' to see all issues"
            echo "Run 'task swift:lint:fix' to auto-fix what's possible"
            rm "$TEMP_FILE"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  SwiftLint not installed"
          echo "   Install with: brew install swiftlint"
          echo "   Or run: task swift:setup"
        fi

  lint:fix:
    desc: Auto-fix SwiftLint issues where possible
    silent: true
    cmds:
      - |
        echo "üîß Fixing Swift linting issues..."
        if command -v swiftlint &> /dev/null; then
          swiftlint lint --fix --quiet
          if [ $? -eq 0 ]; then
            echo "‚úÖ SwiftLint fixes applied"
          else
            echo "‚ö†Ô∏è  Some issues require manual fixing"
            echo ""
            echo "Run 'task swift:lint' to see remaining issues"
          fi
        else
          echo "‚ö†Ô∏è  SwiftLint not installed"
          echo "   Install with: brew install swiftlint"
          echo "   Or run: task swift:setup"
        fi

  build:
    desc: Build project using Swift Package Manager
    silent: true
    cmds:
      - |
        echo "üî® Building with Swift Package Manager..."
        cd {{.SPM_PACKAGE_DIR}} && swift build --configuration debug
        echo "‚úÖ SPM build completed"

  clean:
    desc: Clean Swift Package Manager build artifacts
    silent: true
    cmds:
      - |
        echo "üßπ Cleaning SPM build artifacts..."
        rm -rf {{.SPM_BUILD_DIR}}
        rm -rf Package.resolved
        rm -f coverage.lcov coverage.xml coverage-report.txt
        echo "‚úÖ SPM artifacts cleaned"

  setup:
    desc: Setup Swift development environment and tools
    silent: true
    cmds:
      - |
        echo "üîß Setting up Swift environment..."

        # Check Swift version
        echo "Swift version:"
        swift --version
        echo ""

        # Detect OS
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')

        if [ "$OS" = "darwin" ]; then
          # macOS setup
          echo "üì¶ Setting up development tools for macOS..."

          # Check for Homebrew
          if ! command -v brew &> /dev/null; then
            echo "‚ùå Homebrew not found"
            echo "   Install from: https://brew.sh"
            exit 1
          fi

          # Install/Update SwiftLint
          if ! command -v swiftlint &> /dev/null; then
            echo "üì¶ Installing SwiftLint..."
            brew install swiftlint
          else
            echo "‚úÖ SwiftLint already installed ($(swiftlint version))"
          fi

          # Install/Update swift-format (optional)
          if ! command -v swift-format &> /dev/null; then
            echo "üì¶ Installing swift-format (optional)..."
            brew install swift-format
          else
            echo "‚úÖ swift-format already installed"
          fi
        else
          # Linux setup
          echo "üì¶ Setting up development tools for Linux..."
          echo "Note: On Linux, SwiftLint must be built from source or run via Docker"
        fi

        # Resolve package dependencies
        echo ""
        echo "üì¶ Resolving package dependencies..."
        cd {{.SPM_PACKAGE_DIR}} && swift package resolve

        echo ""
        echo "‚úÖ Swift environment ready"

  sbom:
    desc: Generate Software Bill of Materials (SBOM) in SPDX format
    silent: true
    cmds:
      - |
        echo "üì¶ Generating SBOM for Swift project..."

        # Get package info
        PACKAGE_NAME=$(cd {{.SPM_PACKAGE_DIR}} && swift package dump-package | jq -r '.name')
        VERSION=$(git describe --tags --always 2>/dev/null || echo "1.0.0")
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        # Create SPDX SBOM
        echo "SPDXVersion: SPDX-2.3" > sbom.spdx
        echo "DataLicense: CC0-1.0" >> sbom.spdx
        echo "SPDXID: SPDXRef-DOCUMENT" >> sbom.spdx
        echo "DocumentName: ${PACKAGE_NAME}" >> sbom.spdx
        echo "DocumentNamespace: https://sbom.swift/${PACKAGE_NAME}/spdx-${VERSION}-$(date +%s)" >> sbom.spdx
        echo "Creator: Tool: swift-package-sbom-1.0.0" >> sbom.spdx
        echo "Created: ${TIMESTAMP}" >> sbom.spdx
        echo "" >> sbom.spdx

        # Package information
        echo "PackageName: ${PACKAGE_NAME}" >> sbom.spdx
        echo "SPDXID: SPDXRef-Package-${PACKAGE_NAME}" >> sbom.spdx
        echo "PackageVersion: ${VERSION}" >> sbom.spdx
        echo "PackageSupplier: Organization: Swift Package" >> sbom.spdx
        echo "PackageDownloadLocation: NOASSERTION" >> sbom.spdx
        echo "FilesAnalyzed: true" >> sbom.spdx
        echo "PackageVerificationCode: NOASSERTION" >> sbom.spdx
        echo "PackageLicenseConcluded: NOASSERTION" >> sbom.spdx
        echo "PackageLicenseDeclared: NOASSERTION" >> sbom.spdx
        echo "PackageCopyrightText: NOASSERTION" >> sbom.spdx
        echo "" >> sbom.spdx

        # Dependencies
        echo "" >> sbom.spdx
        echo "# Dependencies" >> sbom.spdx
        DEPS=$(cd {{.SPM_PACKAGE_DIR}} && swift package show-dependencies --format json | jq -r '.dependencies[]? | "PackageName: " + .name + "\nSPDXID: SPDXRef-Package-" + .identity + "\nPackageVersion: " + (.version // "unknown") + "\nPackageDownloadLocation: " + (.url // "NOASSERTION") + "\nFilesAnalyzed: false\nPackageLicenseConcluded: NOASSERTION\nPackageLicenseDeclared: NOASSERTION\nPackageCopyrightText: NOASSERTION\n\nRelationship: SPDXRef-Package-" + .identity + " DEPENDENCY_OF SPDXRef-Package-${PACKAGE_NAME}\n"' 2>/dev/null || echo "")

        if [ -n "$DEPS" ]; then
          echo "$DEPS" >> sbom.spdx
        fi

        echo "‚úÖ Generated: sbom.spdx"
        echo "   Project: ${PACKAGE_NAME} v${VERSION}"

        # Also generate in JSON format
        cd {{.SPM_PACKAGE_DIR}} && swift package show-dependencies --format json > ../sbom-deps.json

        echo "‚úÖ Also generated: sbom-deps.json (Swift dependencies)"
    sources:
      - MagSafeGuardLib/Package.swift
      - MagSafeGuardLib/Sources/**/*.swift
    generates:
      - sbom.spdx
      - sbom-deps.json

  # Internal tasks for backward compatibility
  _spm:test:
    internal: true
    cmds:
      - task: swift:test

  _spm:build:
    internal: true
    cmds:
      - task: swift:build

  _spm:clean:
    internal: true
    cmds:
      - task: swift:clean
