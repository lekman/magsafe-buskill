# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
vars:
  SEMGREP_CONFIG: auto
tasks:
  default:
    desc: List available security tasks
    silent: true
    cmds:
      - task --list | grep "^\\* security:" | grep -v "::" || true
  scan:
    desc: Run all security checks
    silent: true
    cmds:
      - task: secrets
      - task: semgrep
      - task: pins
      - echo "✅ All security checks passed!"
  secrets:
    desc: Scan for hardcoded secrets and sensitive data
    silent: true
    cmds:
      - "echo \"\U0001F50D Scanning for secrets and sensitive data...\"\necho \"\"\n\n# Common patterns to check\npatterns=(\n  \"password.*=.*['\\\"]\" \n  \"api[_-]?key.*=.*['\\\"]\"\n  \"secret.*=.*['\\\"]\"\n  \"token.*=.*['\\\"]\"\n  \"private[_-]?key\"\n  \"-----BEGIN.*PRIVATE KEY-----\"\n  \"Bearer\\s+[A-Za-z0-9\\-_]+\"\n)\n\nfound_issues=0\n\nfor pattern in \"${patterns[@]}\"; do\n  # Search in source files, excluding common false positives\n  results=$(find . \\\n    -type f \\\n    \\( -name \"*.swift\" -o -name \"*.js\" -o -name \"*.ts\" -o -name \"*.py\" -o -name \"*.rb\" -o -name \"*.java\" -o -name \"*.go\" \\) \\\n    -not -path \"./.build/*\" \\\n    -not -path \"./node_modules/*\" \\\n    -not -path \"./.git/*\" \\\n    -not -path \"./vendor/*\" \\\n    -not -path \"*test*\" \\\n    -exec grep -l -E \"$pattern\" {} \\; 2>/dev/null || true)\n  \n  if [ -n \"$results\" ]; then\n    echo \"⚠️  Found potential secrets matching pattern: $pattern\"\n    echo \"$results\" | head -5\n    echo \"\"\n    found_issues=$((found_issues + 1))\n  fi\ndone\n\n# Check for .env files that might be committed\nenv_files=$(find . -name \".env*\" -not -path \"./.git/*\" -not -path \"./node_modules/*\" 2>/dev/null || true)\nif [ -n \"$env_files\" ]; then\n  # Check if these files are in .gitignore\n  unignored_env_files=\"\"\n  for env_file in $env_files; do\n    # Remove leading ./ from path for git check\n    clean_path=${env_file#./}\n    if ! git check-ignore \"$clean_path\" >/dev/null 2>&1; then\n      unignored_env_files=\"$unignored_env_files$env_file\\n\"\n    fi\n  done\n  \n  if [ -n \"$unignored_env_files\" ]; then\n    echo \"⚠️  Found .env files that are NOT in .gitignore:\"\n    echo -e \"$unignored_env_files\"\n    echo \"\"\n    found_issues=$((found_issues + 1))\n  fi\nfi\n\nif [ $found_issues -eq 0 ]; then\n  echo \"✅ No secrets or sensitive data found!\"\nelse\n  echo \"❌ Found $found_issues potential security issues\"\n  echo \"\"\n  echo \"Please review and remove any sensitive data\"\n  exit 1\nfi\n"
  semgrep:
    desc: Run Semgrep security analysis
    silent: true
    cmds:
      - "echo \"\U0001F50D Running Semgrep security analysis...\"\n\nif ! command -v semgrep &> /dev/null; then\n  echo \"⚠️  Semgrep not installed\"\n  echo \"   Install with: task security:setup\"\n  echo \"   Skipping Semgrep scan...\"\n  exit 0\nfi\n\n# Run Semgrep with security rules\nsemgrep --config={{.SEMGREP_CONFIG}} --error --quiet . || exit 1\necho \"✅ Semgrep scan passed\"\n"
  pins:
    desc: Check if all GitHub Actions are properly pinned
    silent: true
    cmds:
      - "echo \"\U0001F50D Checking GitHub Action pins...\"\n\nunpinned=0\nworkflow_files=$(find .github/workflows -name \"*.yml\" -o -name \"*.yaml\" 2>/dev/null || true)\n\nif [ -z \"$workflow_files\" ]; then\n  echo \"✅ No workflow files found\"\n  exit 0\nfi\n\nfor file in $workflow_files; do\n  # Look for uses: statements that aren't pinned to SHA\n  if grep -E \"uses:\\s+[^@]+@(main|master|v[0-9]+)\" \"$file\" >/dev/null 2>&1; then\n    echo \"❌ Unpinned actions found in: $file\"\n    grep -n -E \"uses:\\s+[^@]+@(main|master|v[0-9]+)\" \"$file\" || true\n    unpinned=$((unpinned + 1))\n  fi\ndone\n\nif [ $unpinned -eq 0 ]; then\n  echo \"✅ All GitHub Actions are properly pinned!\"\nelse\n  echo \"\"\n  echo \"⚠️  Found $unpinned workflow files with unpinned actions\"\n  echo \"\"\n  echo \"Run 'task security:pin-actions' to fix this\"\n  exit 1\nfi\n"
  pin-actions:
    desc: Pin all GitHub Actions to specific commit SHAs
    silent: true
    cmds:
      - "# Check if jq is installed\nif ! command -v jq &> /dev/null; then\n  echo \"❌ jq is required but not installed\"\n  echo \"   Install with: brew install jq\"\n  exit 1\nfi\n\n# Check if gh CLI is installed\nif ! command -v gh &> /dev/null; then\n  echo \"❌ GitHub CLI is required but not installed\"\n  echo \"   Install with: brew install gh\"\n  exit 1\nfi\n\necho \"\U0001F512 Pinning GitHub Actions to specific commit SHAs...\"\necho \"\"\n\n# Function to get latest commit SHA for a tag\nget_sha_for_tag() {\n  local repo=$1\n  local tag=$2\n  \n  # Try to get SHA from GitHub API\n  sha=$(gh api repos/$repo/git/refs/tags/$tag 2>/dev/null | jq -r '.object.sha // empty')\n  \n  if [ -z \"$sha\" ]; then\n    # If tag not found, try to get default branch\n    sha=$(gh api repos/$repo 2>/dev/null | jq -r '.default_branch // empty')\n    if [ -n \"$sha\" ]; then\n      sha=$(gh api repos/$repo/git/refs/heads/$sha 2>/dev/null | jq -r '.object.sha // empty')\n    fi\n  fi\n  \n  echo \"$sha\"\n}\n\n# Find all workflow files\nworkflow_files=$(find .github/workflows -name \"*.yml\" -o -name \"*.yaml\" 2>/dev/null || true)\n\nif [ -z \"$workflow_files\" ]; then\n  echo \"No workflow files found\"\n  exit 0\nfi\n\ntotal_pinned=0\n\nfor file in $workflow_files; do\n  echo \"Processing: $file\"\n  temp_file=\"${file}.tmp\"\n  cp \"$file\" \"$temp_file\"\n  \n  # Find all uses statements\n  while IFS= read -r line; do\n    if [[ $line =~ uses:[[:space:]]*([^@]+)@([^[:space:]]+) ]]; then\n      action=\"${BASH_REMATCH[1]}\"\n      version=\"${BASH_REMATCH[2]}\"\n      \n      # Skip if already pinned to SHA (40 character hex)\n      if [[ $version =~ ^[a-f0-9]{40}$ ]]; then\n        continue\n      fi\n      \n      echo \"  Found: $action@$version\"\n      \n      # Get the SHA for this version\n      sha=$(get_sha_for_tag \"$action\" \"$version\")\n      \n      if [ -n \"$sha\" ] && [ \"$sha\" != \"null\" ]; then\n        # Create the replacement with comment\n        escaped_action=$(echo \"$action\" | sed 's/[[\\.*^$()+?{|]/\\\\&/g')\n        escaped_version=$(echo \"$version\" | sed 's/[[\\.*^$()+?{|]/\\\\&/g')\n        \n        # Replace in temp file\n        sed -i '' \"s|uses: ${escaped_action}@${escaped_version}|uses: ${action}@${sha} # ${version}|g\" \"$temp_file\"\n        \n        echo \"    ✅ Pinned to: $sha\"\n        total_pinned=$((total_pinned + 1))\n      else\n        echo \"    ⚠️  Could not find SHA for $action@$version\"\n      fi\n    fi\n  done < \"$file\"\n  \n  # Move temp file back\n  mv \"$temp_file\" \"$file\"\ndone\n\necho \"\"\necho \"✅ Pinned $total_pinned actions to specific SHAs\"\n\nif [ $total_pinned -gt 0 ]; then\n  echo \"\"\n  echo \"\U0001F4DD Remember to commit these changes!\"\nfi\n"
  update-pins:
    desc: Update GitHub Action pins to latest SHAs
    silent: true
    cmds:
      - "# Check if jq is installed\nif ! command -v jq &> /dev/null; then\n  echo \"❌ jq is required but not installed\"\n  echo \"   Install with: brew install jq\"\n  exit 1\nfi\n\n# Check if gh CLI is installed\nif ! command -v gh &> /dev/null; then\n  echo \"❌ GitHub CLI is required but not installed\"\n  echo \"   Install with: brew install gh\"\n  exit 1\nfi\n\necho \"\U0001F504 Updating GitHub Action pins to latest SHAs...\"\necho \"\"\n\n# Function to get latest commit SHA for a tag\nget_sha_for_tag() {\n  local repo=$1\n  local tag=$2\n  \n  # Try to get SHA from GitHub API\n  sha=$(gh api repos/$repo/git/refs/tags/$tag 2>/dev/null | jq -r '.object.sha // empty')\n  \n  if [ -z \"$sha\" ]; then\n    # If tag not found, try to get default branch\n    sha=$(gh api repos/$repo 2>/dev/null | jq -r '.default_branch // empty')\n    if [ -n \"$sha\" ]; then\n      sha=$(gh api repos/$repo/git/refs/heads/$sha 2>/dev/null | jq -r '.object.sha // empty')\n    fi\n  fi\n  \n  echo \"$sha\"\n}\n\n# Find all workflow files\nworkflow_files=$(find .github/workflows -name \"*.yml\" -o -name \"*.yaml\" 2>/dev/null || true)\n\nif [ -z \"$workflow_files\" ]; then\n  echo \"No workflow files found\"\n  exit 0\nfi\n\ntotal_updated=0\n\nfor file in $workflow_files; do\n  echo \"Processing: $file\"\n  temp_file=\"${file}.tmp\"\n  cp \"$file\" \"$temp_file\"\n  \n  # Find all uses statements with SHA and comment showing version\n  while IFS= read -r line; do\n    if [[ $line =~ uses:[[:space:]]*([^@]+)@([a-f0-9]{40})[[:space:]]*#[[:space:]]*([^[:space:]]+) ]]; then\n      action=\"${BASH_REMATCH[1]}\"\n      current_sha=\"${BASH_REMATCH[2]}\"\n      version=\"${BASH_REMATCH[3]}\"\n      \n      echo \"  Found: $action@$current_sha # $version\"\n      \n      # Get the latest SHA for this version\n      new_sha=$(get_sha_for_tag \"$action\" \"$version\")\n      \n      if [ -n \"$new_sha\" ] && [ \"$new_sha\" != \"null\" ] && [ \"$new_sha\" != \"$current_sha\" ]; then\n        # Replace in temp file\n        escaped_action=$(echo \"$action\" | sed 's/[[\\.*^$()+?{|]/\\\\&/g')\n        \n        sed -i '' \"s|uses: ${escaped_action}@${current_sha} # ${version}|uses: ${action}@${new_sha} # ${version}|g\" \"$temp_file\"\n        \n        echo \"    ✅ Updated to: $new_sha\"\n        total_updated=$((total_updated + 1))\n      else\n        echo \"    ✓ Already up to date\"\n      fi\n    fi\n  done < \"$file\"\n  \n  # Move temp file back\n  mv \"$temp_file\" \"$file\"\ndone\n\necho \"\"\nif [ $total_updated -gt 0 ]; then\n  echo \"✅ Updated $total_updated action pins\"\n  echo \"\"\n  echo \"\U0001F4DD Remember to commit these changes!\"\nelse\n  echo \"✅ All action pins are already up to date!\"\nfi\n"
  dependabot:
    desc: Setup Dependabot configuration for security updates
    silent: true
    cmds:
      - "echo \"\U0001F916 Setting up Dependabot for security updates...\"\n\n# Create .github directory if it doesn't exist\nmkdir -p .github\n\n# Check if dependabot.yml already exists\nif [ -f \".github/dependabot.yml\" ]; then\n  echo \"⚠️  .github/dependabot.yml already exists\"\n  echo \"   Current configuration:\"\n  cat .github/dependabot.yml\n  echo \"\"\n  read -p \"Overwrite? (y/N) \" -n 1 -r\n  echo\n  if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n    echo \"Cancelled\"\n    exit 0\n  fi\nfi\n\n# Create dependabot.yml\ncat > .github/dependabot.yml << 'EOF'\nversion: 2\nupdates:\n  # Maintain dependencies for GitHub Actions\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n      day: \"monday\"\n      time: \"09:00\"\n    reviewers:\n      - \"@me\"\n    labels:\n      - \"dependencies\"\n      - \"github-actions\"\n    commit-message:\n      prefix: \"chore\"\n      include: \"scope\"\n\n  # Maintain dependencies for Swift Package Manager\n  - package-ecosystem: \"swift\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n      day: \"monday\"\n      time: \"09:00\"\n    reviewers:\n      - \"@me\"\n    labels:\n      - \"dependencies\"\n      - \"swift\"\n    commit-message:\n      prefix: \"chore\"\n      include: \"scope\"\nEOF\n\necho \"✅ Created .github/dependabot.yml\"\necho \"\"\necho \"Dependabot will now:\"\necho \"  • Check for updates weekly (Mondays at 9 AM)\"\necho \"  • Create PRs for GitHub Actions updates\"\necho \"  • Create PRs for Swift package updates\"\necho \"  • Label PRs with 'dependencies' and ecosystem tags\"\necho \"  • Use 'chore' commit prefix\"\necho \"\"\necho \"\U0001F4DD Remember to commit this file to enable Dependabot!\"\n"
  setup:
    desc: Setup security scanning tools
    silent: true
    cmds:
      - "echo \"\U0001F527 Setting up security tools...\"\n\n# Detect OS\nOS=$(uname -s | tr '[:upper:]' '[:lower:]')\n\nif [ \"$OS\" != \"darwin\" ]; then\n  echo \"⚠️  This task is optimized for macOS\"\n  echo \"   For other platforms, please install tools manually\"\n  exit 0\nfi\n\n# Check for Homebrew\nif ! command -v brew &> /dev/null; then\n  echo \"❌ Homebrew not found\"\n  echo \"   Install from: https://brew.sh\"\n  exit 1\nfi\n\n# Install/Update Semgrep\nif ! command -v semgrep &> /dev/null; then\n  echo \"\U0001F4E6 Installing Semgrep...\"\n  brew install semgrep\nelse\n  echo \"✅ Semgrep already installed ($(semgrep --version | head -1))\"\n  if brew outdated | grep -q \"^semgrep\"; then\n    echo \"\U0001F4E6 Updating Semgrep...\"\n    brew upgrade semgrep\n  fi\nfi\n\n# Install/Update truffleHog (secret scanner)\nif ! command -v trufflehog &> /dev/null; then\n  echo \"\U0001F4E6 Installing truffleHog...\"\n  brew install trufflehog\nelse\n  echo \"✅ truffleHog already installed\"\n  if brew outdated | grep -q \"^trufflehog\"; then\n    echo \"\U0001F4E6 Updating truffleHog...\"\n    brew upgrade trufflehog\n  fi\nfi\n\n# Install/Update gitleaks (secret scanner)\nif ! command -v gitleaks &> /dev/null; then\n  echo \"\U0001F4E6 Installing gitleaks...\"\n  brew install gitleaks\nelse\n  echo \"✅ gitleaks already installed\"\n  if brew outdated | grep -q \"^gitleaks\"; then\n    echo \"\U0001F4E6 Updating gitleaks...\"\n    brew upgrade gitleaks\n  fi\nfi\n\n# Install/Update jq (for JSON parsing)\nif ! command -v jq &> /dev/null; then\n  echo \"\U0001F4E6 Installing jq...\"\n  brew install jq\nelse\n  echo \"✅ jq already installed\"\n  if brew outdated | grep -q \"^jq\"; then\n    echo \"\U0001F4E6 Updating jq...\"\n    brew upgrade jq\n  fi\nfi\n\n# Install/Update GitHub CLI (for pin operations)\nif ! command -v gh &> /dev/null; then\n  echo \"\U0001F4E6 Installing GitHub CLI...\"\n  brew install gh\nelse\n  echo \"✅ GitHub CLI already installed\"\n  if brew outdated | grep -q \"^gh\"; then\n    echo \"\U0001F4E6 Updating GitHub CLI...\"\n    brew upgrade gh\n  fi\nfi\n\necho \"\"\necho \"✅ Security tools installed\"\necho \"\"\necho \"Installed tools:\"\necho \"  - Semgrep: $(semgrep --version | head -1)\"\necho \"  - truffleHog: $(trufflehog --version 2>&1 | head -1)\"\necho \"  - gitleaks: $(gitleaks version 2>&1)\"\necho \"  - jq: $(jq --version)\"\necho \"  - gh: $(gh --version | head -1)\"\n"
  gitleaks:
    desc: Run gitleaks secret scanner
    silent: true
    cmds:
      - "echo \"\U0001F50D Running gitleaks secret scanner...\"\n\nif ! command -v gitleaks &> /dev/null; then\n  echo \"⚠️  gitleaks not installed\"\n  echo \"   Install with: task security:setup\"\n  exit 0\nfi\n\n# Run gitleaks\nif gitleaks detect --verbose --redact; then\n  echo \"✅ No secrets found by gitleaks\"\nelse\n  echo \"❌ gitleaks found secrets!\"\n  exit 1\nfi\n"
  trufflehog:
    desc: Run truffleHog secret scanner
    silent: true
    cmds:
      - "echo \"\U0001F50D Running truffleHog secret scanner...\"\n\nif ! command -v trufflehog &> /dev/null; then\n  echo \"⚠️  truffleHog not installed\"\n  echo \"   Install with: task security:setup\"\n  exit 0\nfi\n\n# Run truffleHog on current directory\necho \"Scanning filesystem...\"\nif trufflehog filesystem . --no-update --fail; then\n  echo \"✅ No secrets found by truffleHog\"\nelse\n  echo \"❌ truffleHog found secrets!\"\n  exit 1\nfi"
