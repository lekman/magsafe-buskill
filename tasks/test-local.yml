version: "3"

# Local test execution that generates coverage artifacts for CI

vars:
  PROJECT_NAME: MagSafeGuard
  DERIVED_DATA: DerivedData

tasks:
  default:
    desc: Show available local test tasks
    silent: true
    cmds:
      - |
        echo "üß™ Local Test Tasks"
        echo "=================="
        echo ""
        echo "Available tasks:"
        echo "  task test-local:coverage         - Generate coverage locally"
        echo "  task test-local:coverage:commit  - Generate and commit coverage"
        echo ""

  coverage:
    desc: Generate test coverage locally for CI consumption
    silent: true
    cmds:
      - |
        echo "üß™ Generating test coverage locally..."

        # Clean derived data
        rm -rf {{.DERIVED_DATA}}
        rm -f coverage.lcov

        # Run tests with coverage
        xcodebuild test \
          -project {{.PROJECT_NAME}}.xcodeproj \
          -scheme {{.PROJECT_NAME}} \
          -destination 'platform=macOS' \
          -derivedDataPath {{.DERIVED_DATA}} \
          -enableCodeCoverage YES \
          -only-testing:{{.PROJECT_NAME}}Tests \
          -skip-testing:{{.PROJECT_NAME}}UITests \
          -quiet || {
            echo "‚ùå Tests failed"
            exit 1
          }

        echo "‚úÖ Tests completed"

        # Convert coverage
        echo "Converting coverage data..."

        # Find the coverage profdata
        PROFDATA=$(find {{.DERIVED_DATA}} -name "Coverage.profdata" | head -1)
        BINARY=$(find {{.DERIVED_DATA}} -name "{{.PROJECT_NAME}}Tests" -type f -perm +111 | head -1)

        if [ -n "$PROFDATA" ] && [ -n "$BINARY" ]; then
          # Generate LCOV format
          xcrun llvm-cov export \
            -format=lcov \
            -instr-profile="$PROFDATA" \
            "$BINARY" \
            > coverage.lcov
          
          echo "‚úÖ Coverage report generated: coverage.lcov"
          echo "Coverage file size: $(wc -c < coverage.lcov) bytes"
          
          # Also generate XML for SonarCloud
          task sonar:convert
          
          echo ""
          echo "Coverage files created:"
          echo "  - coverage.lcov ($(wc -l < coverage.lcov) lines)"
          echo "  - coverage.xml ($(wc -l < coverage.xml 2>/dev/null || echo 0) lines)"
        else
          echo "‚ùå Could not find coverage data"
          exit 1
        fi

  coverage:commit:
    desc: Generate coverage and commit to git
    silent: true
    cmds:
      - task: coverage
      - |
        echo ""
        echo "üìù Preparing to commit coverage files..."

        # Check if files exist
        if [ ! -f coverage.lcov ] || [ ! -f coverage.xml ]; then
          echo "‚ùå Coverage files not found"
          exit 1
        fi

        # Stage coverage files
        git add coverage.lcov coverage.xml

        # Check if there are changes
        if git diff --cached --quiet; then
          echo "‚ÑπÔ∏è  No changes to coverage files"
          exit 0
        fi

        # Commit with timestamp
        TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
        git commit -m "chore: update test coverage reports [skip ci]

        Generated on: $TIMESTAMP
        Coverage files:
        - coverage.lcov: LCOV format for Codecov
        - coverage.xml: SonarQube generic format for SonarCloud

        [skip ci]"

        echo "‚úÖ Coverage files committed"
        echo ""
        echo "Next steps:"
        echo "  1. Push to trigger CI: git push"
        echo "  2. CI will use committed coverage files"
